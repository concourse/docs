\title{Teams}{teams}

\use-plugin{concourse-docs}

Every pipeline and one-off build belongs to a \italic{team}.

A team is simply a conceptual owner and a separate namespace for data in
Concourse (pipelines, builds, etc.) with its own auth configuration. A team may
whitelist users or groups either from local auth or from an external provider
such as GitHub, UAA, etc.

As described in \reference{auth-config}, teams are no longer used to log in to
Concourse. Instead, you can add preconfigured users to various teams as shown
in \reference{authentication} below.

\split-sections
\table-of-contents

\section{
  \title{\aux{The }\code{main} team}{main-team}

  Out of the box, Concourse comes with a single team called \code{main}.

  The \code{main} team is an \italic{admin team}, meaning it can create and
  update other teams. Currently there is no way to promote a team to become an
  admin team, so \code{main} is a special-case.

  The \code{main} team is configured as part of the deployment itself as flags
  passed to the ATC. Changes to these flags take effect whenever the ATC starts
  up. This is so that you can't get locked out, and so that you can have
  Concourse sanely configured as soon as it comes up.

  Consult \code{web --help} to discover the flags for configuring auth for the
  \code{main} team.
}

\section{
  \title{Creating & Updating Teams}

  \section{
    \title{\code{fly set-team}}{fly-set-team}

    Once you've \reference{fly-login}{logged in as the \code{main} team
    with \code{fly}}, you can run \reference{fly-set-team} to create or
    update other teams.

    To create a new team or update an existing team's authorized users and groups run:

    \codeblock{bash}{{{
    $ fly -t example set-team --team-name my-team \
        --local-user some_username 
    }}}

    Teams can also update their own configuration with the same command.

    There are many different ways to configure auth; see
    \reference{authentication} for more information.

    Once the team has been created, you can use \reference{fly-login} to log in:

    \codeblock{bash}{{
    $ fly login -n my-team
    }}

    Any newly configured pipelines (via \reference{fly-set-pipeline}) and one-off
    builds (via \reference{fly-execute}) will be owned by the authorized team.
    Commands that list content will be scoped to the current team by default,
    such as \reference{fly-pipelines} and \reference{fly-builds}. The web UI
    should reflect the same state.

    Newly configured pipelines are hidden by default, meaning other teams and
    unauthorized visitors cannot view them. To make them publicly viewable, see
    \reference{exposing}.
  }
}

\section{
  \title{Managing Teams}{managing-teams}

  \section{
    \title{\code{fly teams}}{fly-teams}

    To list all the teams, run:

    \codeblock{bash}{{
    $ fly -t example teams
    }}

    This can be useful if you've forgotten your team name.
  }

  \section{
    \title{\code{rename-team}\aux{: Renaming Teams}}{fly-rename-team}

    To rename a team, run:

    \codeblock{bash}{{{
    $ fly -t example rename-team --old-name my-team --new-name cool-team
    }}}

    This can only be run by the \reference{main-team}{\code{main} team}.
  }

  \section{
    \title{\code{fly destroy-team}}{fly-destroy-team}

    To remove a team, including all of its pipelines and one-off builds, first
    log in as the \reference{main-team}, and then run:

    \codeblock{bash}{{
    $ fly -t example destroy-team --team-name my-team
    }}

    Currently, if there were any workers assigned specifically to this team,
    they'll be orphaned, without having their containers or volumes cleaned up.
  }
}

\section{
  \title{Configuring Team Auth}{authentication}

  Continuous Integration servers often contain a considerable number of secrets
  to let them access source code and deploy applications. It is important that
  those secrets remain well guarded. Concourse provides options for both
  authentication and authorization to give you control over who can access your
  server and how much they can see.

  \aside{
    If you access your Concourse server over the public internet then all of
    the options below are useless without using TLS to secure your connection.
  }

  The authentication methods for teams are determined by flags passed to
  \reference{fly-set-team}, except for the \reference{main-team}, which is
  configured as part of the deployment.

  Any number of the following providers can be enabled at any one time. Users
  will be given a choice when logging in as to which one they would like to
  use.

  \warn{
    In order to use any of the auth providers listed below, you must first
    enable the provider by configuring any required information at deployment
    time as per the \reference{install} guide.
  }

  \section{
    \title{Local Auth}{local-auth}

    You can configure local users for a team via the \code{--local-user} flag.

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --local-user some_username 
    }}}
  }

  \section{
    \title{GitHub Auth}{github-auth}

    You can con configure which organizations, teams, and individual users
    should have access to your team.

    This is done by passing the following flags:

    \definitions{
      \definition{\code{--github-user=LOGIN}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--github-org=ORG_NAME}}{
        Authorize an entire organization's members.
      }
    }{
      \definition{\code{--github-team=ORG_NAME:TEAM_NAME}}{
        Authorize an team's members within an organization.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --github-user my-github-login \
        --github-org my-org \
        --github-team my-other-org:my-team
    }}}
  }

  \section{
    \title{CF Auth}{uaa-cf-auth}

    You can configure which org/space members from a CF deployment should have
    access to your team.

    \definitions{
      \definition{\code{--cf-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--cf-org=ORG_NAME}}{
        Authorize an entire organization's members.
      }
    }{
      \definition{\code{--cf-space=ORG_NAME:SPACE_NAME}}{
        Authorize the members of a space within an organization.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --cf-user my-username \
        --cf-org my-org \
        --cf-space my-other-org:my-space
    }}}
  }

  \section{
    \title{Generic oAuth}{generic-oauth}

    You can configure users and groups from a generic oAuth provider.

    You may only configure groups if the auth provider exposes this information
    in either the token itself, or in the contents of the userinfo endpoint.
    You can configure which claim points to the groups information by specifying
    the \code{groups-key} at startup.

    \definitions{
      \definition{\code{--oauth-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--oauth-group=GROUP_NAME}}{
        Authorize anyone from the group.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --oauth-user my-username \
        --oauth-group my-group
    }}}
  }

  \section{
    \title{Generic OIDC}{generic-oidc}

    You can configure users and groups from a generic OIDC provider. This is
    very similar to the oAuth connector. The main difference being that OIDC
    providers must adhere to the OIDC specification, whereas generic oAuth
    providers can be a little more flexible.

    You may only configure groups if the auth provider exposes this information
    in the contents of the userinfo endpoint. You can configure which claim
    points to the groups information by specifying the \code{groups-key} at
    startup.

    \definitions{
      \definition{\code{--oidc-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--oidc-group=GROUP_NAME}}{
        Authorize anyone from the group.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --oidc-user my-username \
        --oidc-group my-group
    }}}
  }
}

\section{
  \title{Pipeline & Build Visibility}{exposing}

  Every newly configured pipeline is hidden to anyone but the pipeline's team.
  To make a pipeline publicly viewable, both by other teams and unauthenticated
  users, see \reference{fly-expose-pipeline}.

  Even with a pipeline exposed, all build logs are hidden by default. This is
  because CI jobs are prone to leaking credentials and other...unsavory
  information. After you've determined that a job's builds should be safe for
  public consumption, you can set \reference{job-public}{\code{public: true}}
  on the job in your pipeline.
}

\section{
  \title{Security Caveats}{teams-caveats}

  At present, teams only provide \italic{trusted multi-tenancy}. This means it
  should be used for cases where you know and trust who you're allowing access
  into your Concourse cluster.

  There are a few reasons it'd be a bad idea to do otherwise:

  \list{
    Any team can run builds with \reference{task-step-privileged} tasks. A bad
    actor in the mix could easily use this to harm your workers and your
    cluster.

    In the future, we'll probably have this as a flag on a team, indicating
    whether they're permitted to run privileged builds.
  }{
    There are no networking restrictions in place, and traffic to and from the
    workers is currently unencrypted and unauthorized. Anyone could run a task
    that does horrible things to your worker's containers, possibly stealing
    sensitive information.

    This can be remedied with configuration specified on Garden to restrict
    access to the internal network, but this is not detailed in our docs, and
    we'll probably want to find a better answer than configuration in the
    future.
  }
}
