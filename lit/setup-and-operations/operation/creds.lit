\title{Credential Management}{creds}

\use-plugin{concourse-docs}

Going beyond \reference{encryption}, explicit credential management will
provide credentials to your builds for a brief amount of time, without being
persisted anywhere. It also allows for credentials to be rotated and managed
external to the pipeline or team, and prevents them from being revealed by
\reference{fly-get-pipeline}.

Currently, the only supported credential managers are
\link{Vault}{https://vaultproject.io},
\link{Credhub}{https://github.com/cloudfoundry-incubator/credhub},
\link{Amazon SSM}{https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html}, and
\link{Amazon Secrets Manager}{https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html}.

Credential management works by replacing the credentials with
\reference{pipeline-params} in your pipeline or task config. When the ATC is
about to run the step or \code{check} that is configured with the parameters,
it will resolve them by fetching the values from the credential manager. If the
values are not present, the action will error.

\section{
  \title{What can be parameterized?}

  The following configurations can be parameterized with a credential manager:

  \list{
    \reference{resource-source} under \reference{resources} in a pipeline
  }{
    \reference{resource-type-source} under \reference{resource-types} in a
    pipeline
  }{
    \reference{resource-webhook-token} under \reference{resources} in a
    pipeline
  }{
    \reference{image-resource-source} under \reference{image_resource} in a
    task config
  }{
    \reference{task-step-params} in a pipeline
  }{
    \reference{task-params} in a task config
  }

  Where these values are looked up and how the credential manager is configured
  depends on the backend. Consult the relevant section below for whichever
  backend you want to use.
}

\section{
  \title{Using Vault}{vault}

  \omit-children-from-table-of-contents

  \section{
    \title{Configuration}

    The ATC is statically configured with a Vault server URL (plus any TLS
    config), and either a client token or an auth backend.

    The ATC's configuration specifies the following:

    \define-attribute{vault-url: string}{
      Vault server address used to access secrets.

      Environment variable \code{CONCOURSE_VAULT_URL}.
    }

    \define-attribute{vault-path-prefix: string}{
      Path under which to namespace credential lookup.

      Environment variable \code{CONCOURSE_VAULT_PATH_PREFIX}.

      Default: \code{/concourse}.
    }

    \define-attribute{vault-ca-cert: string}{
      Path to a PEM-encoded CA cert file to use to verify the vault server SSL cert.

      Environment variable \code{CONCOURSE_VAULT_CA_CERT}.
    }

    \define-attribute{vault-ca-path: string}{
      Path to a directory of PEM-encoded CA cert files to verify the vault server SSL cert.

      Environment variable \code{CONCOURSE_VAULT_CA_PATH}.
    }

    \define-attribute{vault-client-cert: string}{
      Path to the client certificate for Vault authorization.

      Environment variable \code{CONCOURSE_VAULT_CLIENT_CERT}.
    }

    \define-attribute{vault-client-key: string}{
      Path to the client private key for Vault authorization.

      Environment variable \code{CONCOURSE_VAULT_CLIENT_KEY}.
    }

    \define-attribute{vault-server-name: string}{
      If set, is used to set the SNI host when connecting via TLS.

      Environment variable \code{CONCOURSE_VAULT_SERVER_NAME}.
    }

    \define-attribute{vault-insecure-skip-verify: string}{
      Enable insecure SSL verification.

      Environment variable \code{CONCOURSE_VAULT_INSECURE_SKIP_VERIFY}.
    }

    \define-attribute{vault-client-token: string}{
      Client token for accessing secrets within the Vault server.

      Environment variable \code{CONCOURSE_VAULT_CLIENT_TOKEN}.
    }

    \define-attribute{vault-auth-backend: string}{
      Auth backend to use for logging in to Vault.

      Environment variable \code{CONCOURSE_VAULT_AUTH_BACKEND}.
    }

    \define-attribute{vault-auth-backend-max-ttl: string}{
      Auth backend max TTL. Concourse will renew its token and then re-login when the auth backend max TTL is reached.

      Environment variable \code{CONCOURSE_VAULT_AUTH_BACKEND_MAX_TTL}.
    }

    \define-attribute{vault-cache: bool}{
      Cache returned secrets for their lease duration in memory

      Environment variable \code{CONCOURSE_VAULT_CACHE}.
    }

    \define-attribute{vault-max-lease: string}{
      If the cache is enabled, and this is set, override secrets lease duration with a maximum value.

      Environment variable \code{CONCOURSE_VAULT_MAX_LEASE}.
    }

    \define-attribute{vault-auth-param=NAME=VALUE: string}{
      Paramter to pass when logging in via the backend. Can be specified multiple times.

      Environment variable \code{CONCOURSE_VAULT_AUTH_PARAM} (pass comma-separated list).

      Example:

      \codeblock{bash}{{{
        CONCOURSE_VAULT_AUTH_PARAM="role_id=x,secret_id=x" \
        concourse web ...
      }}}
    }

    For example, to point the ATC at an internal Vault server with TLS signed
    by a local CA, using an
    \link{AppRole}{https://www.vaultproject.io/docs/auth/approle.html}
    auth backend, you may configure:

    \codeblock{bash}{{{
      concourse web ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-auth-backend approle \
        --vault-auth-param role_id=db02de05-fa39-4855-059b-67221c5c2f63 \
        --vault-auth-param secret_id=6a174c20-f6de-a53c-74d2-6018fcceff64

      # or use env variables
      CONCOURSE_VAULT_URL="https://10.2.0.3:8200" \
      CONCOURSE_VAULT_CA_CERT="/etc/my-ca.cert" \
      CONCOURSE_VAULT_AUTH_BACKEND="approle" \
      CONCOURSE_VAULT_AUTH_PARAM="role_id=db02de05-fa39-4855-059b-67221c5c2f63,secret_id=6a174c20-f6de-a53c-74d2-6018fcceff64" \
      concourse web ...
    }}}

    You may instead want to use the
    \link{TLS}{https://www.vaultproject.io/docs/auth/cert.html} auth
    backend, in which case you would specify a client certificate and private
    key, like so:

    \codeblock{bash}{{{
      concourse web ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-client-cert /etc/my-client.cert \
        --vault-client-key /etc/my-client.key \
        --vault-auth-backend cert
    }}}

    In this case no params are necessary, as the TLS auth backend will check
    the certificate against all roles if no name is specified.

    Alternatively, if you've got a \link{periodic
    token}{https://www.vaultproject.io/docs/concepts/tokens.html#periodic-tokens}
    created, you can pass it directly as \code{--vault-client-token}. Make sure
    the period is long enough to account for any ATC downtime, however,
    including the time between generating it and getting the ATC running.

    \codeblock{bash}{{{
      concourse web ... \
        --vault-url https://10.2.0.3:8200 \
        --vault-ca-cert /etc/my-ca.cert \
        --vault-client-token c2c2fbd5-2893-b385-6fa5-30050439f698
    }}}

    For all of these configurations, the ATC will periodically renew its token,
    ensuring it doesn't expire.
  }

  \section{
    \title{Credential Lookup Rules}

    When resolving a parameter such as \code{((foo_param))}, it will look in
    the following paths, in order:

    \list{
      \code{
        /concourse/TEAM_NAME/PIPELINE_NAME/foo_param
      }
    }{
      \code{
        /concourse/TEAM_NAME/foo_param
      }
    }

    The leading \code{/concourse} can be changed by specifying
    \code{--vault-path-prefix}.

    Vault credentials are actually key-value, so for \code{((foo))} Concourse will
    default to the field name \code{value}. You can specify the field to grab via
    \code{.} syntax, e.g. \code{((foo.bar))}.

    If the action is being run in the context of a pipeline (e.g. a
    \code{check} or a step in a build of a job), the ATC will first look in the
    pipeline path. If it's not found there, it will look in the team path. This
    allows credentials to be scoped widely if they're common across many
    pipelines.

    If an action is being run in a one-off build, the ATC will only look in the
    team path.

    \section{
      \title{Caveat: multiple fields of a rotating key}

      When a key has multiple fields and is re-generated on every fetch, for
      example when using the \link{AWS secret
      backend}{https://www.vaultproject.io/docs/secrets/aws/index.html}, the
      ATC will currently fetch the credential once for each parameter,
      resulting in fields that don't match each other. This will be fixed in an
      upcoming release of Concourse.
    }
  }
}

\section{
  \title{Using Credhub}{credhub}

  \omit-children-from-table-of-contents

  \section{
    \title{Configuration}

    The ATC is statically configured with a Credhub server URL with TLS and
    client config.

    For example, to point the ATC at an internal Credhub server with TLS signed
    by a local CA, using client id and secret, you may configure:

    \codeblock{bash}{{{
      concourse web ... \
        --credhub-url https://10.2.0.3:9000 \
        --credhub-ca-cert /etc/my-ca.cert \
        --credhub-client-id =db02de05-fa39-4855-059b-67221c5c2f63 \
        --credhub-client-secret 6a174c20-f6de-a53c-74d2-6018fcceff64
    }}}
  }

  \section{
    \title{Credential Lookup Rules}

    When resolving a parameter such as \code{((foo_param))}, it will look in
    the following paths, in order:

    \list{
      \code{
        /concourse/TEAM_NAME/PIPELINE_NAME/foo_param
      }
    }{
      \code{
        /concourse/TEAM_NAME/foo_param
      }
    }

    The leading \code{/concourse} can be changed by specifying
    \code{--credhub-path-prefix}.

    Credhub credentials actually have different types, which may contain
    multiple values. For example, the \code{user} type specifies both \code{username} and
    \code{password}. You can specified the field to grab via \code{.} syntax, e.g.
    \code{((foo_param.username))}.

    If the action is being run in the context of a pipeline (e.g. a
    \code{check} or a step in a build of a job), the ATC will first look in the
    pipeline path. If it's not found there, it will look in the team path. This
    allows credentials to be scoped widely if they're common across many
    pipelines.

    If an action is being run in a one-off build, the ATC will only look in the
    team path.
  }
}

\section{
  \title{Using Amazon SSM}{ssm}

  \section{
    \title{Configuration}

    The ATC is configured with an access key and secret key or session token and
    the AWS region that your parameters are stored within. If no access key,
    secret key, or session token is provided, Concourse will attempt to use
    environment variables or the instance credentials assigned to the instance.

    The ATC's configuration specifies the following:

    \define-attribute{aws-ssm-access-key: string}{
      A valid AWS access key.

      Environment variable \code{CONCOURSE_AWS_SSM_ACCESS_KEY}.
    }

    \define-attribute{aws-ssm-secret-key: string}{
      The secret key that corresponds to the access key defined above.

      Environment variable \code{CONCOURSE_AWS_SSM_SECRET_KEY}.
    }

    \define-attribute{aws-ssm-session-token: string}{
      A valid AWS session token.

      Environment variable \code{CONCOURSE_AWS_SSM_SESSION_TOKEN}.
    }

    \define-attribute{aws-ssm-region: string}{
      The AWS region that requests to parameter store will be sent to.

      Environment variable \code{AWS_REGION}.
    }

    \define-attribute{aws-ssm-pipeline-secret-template: string}{
      The base path used when attempting to locate a pipeline-level secret.

      Environment variable \code{CONCOURSE_AWS_SSM_PIPELINE_SECRET_TEMPLATE}.

      Example:

      Default: \code{/concourse/\{\{.Team\}\}/\{\{.Pipeline\}\}/\{\{.Secret\}\}}
    }

    \define-attribute{aws-ssm-team-secret-template: string}{
      The base path used when attempting to locate a team-level secret.

      Environment variable \code{CONCOURSE_AWS_SSM_TEAM_SECRET_TEMPLATE}.

      Example:

      Default: \code{/concourse/\{\{.Team\}\}/\{\{.Secret\}\}}
    }

    For example, to launch the ATC and enable the parameter store, you may
    configure:

    \codeblock{bash}{{{
      concourse web ... \
        --aws-ssm-region us-east-1 \
        --aws-ssm-access-key AKIAIOSFODNN7EXAMPLE \
        --aws-ssm-secret-key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

      # or use env variables
      AWS_REGION="us-east-1" \
      CONCOURSE_AWS_SSM_ACCESS_KEY="AKIAIOSFODNN7EXAMPLE" \
      CONCOURSE_AWS_SSM_SECRET_KEY="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" \
      concourse web ...
    }}}

    A more secure method is to configure an
    \link{IAM role}{https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html}
    for your EC2 ATC instance so that credentials are fetched automatically from
    the EC2 metadata service.
    }

  \section{
    \title{IAM Permissions}

    The following is an example of an IAM policy that can be used to grant
    permissions to an IAM user or instance role. Note that the \code{Resource}
    section can contain a wildcard to a parameter or be restricted to an
    individual parameter.

    \codeblock{json}{{{
      {
          "Version": "2012-10-17",
          "Statement": [
              {
                  "Sid": "AllowAccessToSsmParameters",
                  "Effect": "Allow",
                  "Action": "ssm:GetParameters",
                  "Resource": [
                      "arn:aws:ssm:::parameter/concourse/*",
                      "arn:aws:ssm:::parameter/concourse/TEAM_NAME/*",
                      "arn:aws:ssm:::parameter/concourse/TEAM_NAME/PIPELINE_NAME/*"
                  ]
              },
              {
                  "Sid": "AllowAccessToDecryptSsmParameters",
                  "Effect": "Allow",
                  "Action": [
                      "kms:ListKeys",
                      "kms:ListAliases",
                      "kms:Describe*",
                      "kms:Decrypt"
                  ],
                  "Resource": "arn:aws:::key/KMS_KEY_ID"
              }
          ]
      }
    }}}

    Note that the \code{TEAM_NAME}, \code{PIPELINE_NAME}, and \code{KMS_KEY_ID} text above should
    be replaced to fit your Concourse setup.

    For more information on how to use IAM roles to restrict access to SSM parameters,
    review the
    \link{official documentation}{https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html}.
  }

  \section{
    \title{Credential Lookup Rules}

    When resolving a parameter such as \code{((foo_param))}, Concourse will look in
    the following paths, in order:

    \list{
      \codeblock{}{{{
        /concourse/TEAM_NAME/PIPELINE_NAME/foo_param
      }}}
    }{
      \codeblock{}{{{
        /concourse/TEAM_NAME/foo_param
      }}}
    }

    The leading \code{/concourse} can be changed by specifying
    \code{--aws-ssm-pipeline-secret-template} or
    \code{--aws-ssm-team-secret-template} variables.
  }
}

\section{
  \title{Using Amazon Secrets Manager}{asm}

  \section{
    \title{Configuration}

    The ATC is configured with an access key and secret key or session token and
    the AWS region that your parameters are stored within. If no access key,
    secret key, or session token is provided, Concourse will attempt to use
    environment variables or the instance credentials assigned to the instance.

    The ATC's configuration specifies the following:

    \define-attribute{aws-secretsmanager-access-key: string}{
      A valid AWS access key.

      Environment variable \code{CONCOURSE_AWS_SECRETSMANAGER_ACCESS_KEY}.
    }

    \define-attribute{aws-secretsmanager-secret-key: string}{
      The secret key that corresponds to the access key defined above.

      Environment variable \code{CONCOURSE_AWS_SECRETSMANAGER_SECRET_KEY}.
    }

    \define-attribute{aws-secretsmanager-session-token: string}{
      A valid AWS session token.

      Environment variable \code{CONCOURSE_AWS_SECRETSMANAGER_SESSION_TOKEN}.
    }

    \define-attribute{aws-secretsmanager-region: string}{
      The AWS region that requests to Secrets Manager will be sent to.

      Environment variable \code{AWS_REGION}.
    }

    \define-attribute{aws-secretsmanager-pipeline-secret-template: string}{
      The base path used when attempting to locate a pipeline-level secret.

      Environment variable \code{CONCOURSE_AWS_SECRETSMANAGER_PIPELINE_SECRET_TEMPLATE}.

      Example:

      Default: \code{/concourse/\{\{.Team\}\}/\{\{.Pipeline\}\}/\{\{.Secret\}\}}
    }

    \define-attribute{aws-secretsmanager-team-secret-template: string}{
      The base path used when attempting to locate a team-level secret.

      Environment variable \code{CONCOURSE_AWS_SECRETSMANAGER_TEAM_SECRET_TEMPLATE}.

      Example:

      Default: \code{/concourse/\{\{.Team\}\}/\{\{.Secret\}\}}
    }

    For example, to launch the ATC and enable Secrets Manager, you may
    configure:

    \codeblock{bash}{{{
      concourse web ... \
        --aws-secretsmanager-region us-east-1 \
        --aws-secretsmanager-access-key AKIAIOSFODNN7EXAMPLE \
        --aws-secretsmanager-secret-key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

      # or use env variables
      AWS_REGION="us-east-1" \
      CONCOURSE_AWS_SECRETSMANAGER_ACCESS_KEY="AKIAIOSFODNN7EXAMPLE" \
      CONCOURSE_AWS_SECRETSMANAGER_SECRET_KEY="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" \
      concourse web ...
    }}}

    A more secure method is to configure an
    \link{IAM role}{https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html}
    for your EC2 ATC instance so that credentials are fetched automatically from
    the EC2 metadata service.
  }

  \section{
    \title{IAM Permissions}

    The following is an example of an IAM policy that can be used to grant
    permissions to an IAM user or instance role. Note that the \code{Resource}
    section can contain a wildcard to a secret or be restricted to an
    individual secret.

    \codeblock{json}{{{
      {
          "Version": "2012-10-17",
          "Statement": [
              {
              "Sid": "AllowAccessToSecretManagerParameters",
              "Effect": "Allow",
              "Action": [
                  "secretsmanager:ListSecrets"
              ],
                "Resource": "*"
              },
              {
                  "Sid": "AllowAccessGetSecret",
                  "Effect": "Allow",
                  "Action": [
                      "secretsmanager:GetSecretValue",
                      "secretsmanager:DescribeSecret"
                  ],
                  "Resource": [
                      "arn:aws:secretsmanager:::secret:/concourse/*",
                      "arn:aws:secretsmanager:::secret:/concourse/TEAM_NAME/*",
                      "arn:aws:secretsmanager:::secret:/concourse/TEAM_NAME/PIPELINE_NAME/*"
                  ]
              }
          ]
      }
    }}}

    Note that the \code{TEAM_NAME} and \code{PIPELINE_NAME} text above should be replaced to
    fit your Concourse setup.

    For more information on how to use IAM roles to restrict access to Secrets Manager,
    review the
    \link{official documentation}{https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_identity-based-policies.html}.
  }

  \section{
    \title{Credential Lookup Rules}

    When resolving a parameter such as \code{((foo_param))}, Concourse will look in
    the following paths, in order:

    \list{
      \codeblock{}{{{
        /concourse/TEAM_NAME/PIPELINE_NAME/foo_param
      }}}
    }{
      \codeblock{}{{{
        /concourse/TEAM_NAME/foo_param
      }}}
    }

    The leading \code{/concourse} can be changed by specifying
    \code{--aws-secretsmanager-pipeline-secret-template} or
    \code{--aws-secretsmanager-team-secret-template} variables.
  }
}

\section{
  \title{Common Configuration Parameters}

  If credential manager is not available and Concourse thinks it's an intermittent error, it will attempt to
  retry resolving a parameter before failing a task or a resource. This behavior can be controlled by specifying
  variables \code{--secret-retry-attempts} (how many times to retry) and \code{--secret-retry-interval} (how much
  to wait between retries).
}
