\title{Install}{install}{installing}{binaries}

\use-plugin{concourse-docs}

Concourse is distributed as a single \code{concourse} binary, which contains
the logic for running both a \reference{web-node} and a
\reference{worker-node}. The binary is fairly self-contained, making it ideal
for tossing onto a VM by hand or orchestrating it with Docker, Kubernetes, or
other ops tooling.

For the sake of brevity and clarity, this document will focus solely on the
\code{concourse} binary. Documentation for other platforms is available
localized to their GitHub repository, as linked to by the \reference{download}
page.

\italic{
  Note: this document is not an exhaustive reference for the \code{concourse}
  CLI! Consult the \code{--help} output if you're looking for a knob to turn.
}

\section{
  \title{Prerequisites}

  \list{
    Grab the appropriate binary for your platform from the
    \reference{downloads}{downloads} section.
  }{
    On Linux you'll need kernel v3.19 or later, with user namespace support
    enabled. Windows and Darwin don't really need anything special.
  }{
    A PostgresSQL 9.5+ server running somewhere with an empty database created.
    If you're going to run a server yourself, refer to your platform or Linux
    distribution's installation instructions; we can't feasibly maintain the
    docs for this subject ourselves.
  }
}

\section{
  \title{Quick Start}{quickstart}

  Before you spend time getting a \reference{cluster}{cluster} up and running,
  you might want to just kick the tires a bit and run everything at once. This
  can be achieved with the \code{quickstart} command:

  \codeblock{bash}{{{
  concourse quickstart \
    --add-local-user myuser:mypass \
    --main-team-local-user myuser \
    --external-url http://my-ci.example.com \
    --worker-work-dir /opt/concourse/worker
  }}}

  This command is shorthand for running a single \reference{web-node} and
  \reference{worker-node} on the same machine, auto-wired to trust each other.
  We've also configured some local auth for the \reference{main-team} -
  you may want to change that (see \reference{authentication}).

  So far we've assumed that you have a local PostgreSQL server running on the
  default port (\code{5432}) with an \code{atc} database, accessible by the
  current UNIX user. If your database lives elsewhere, just specify the
  \code{--postgres-*} flags (consult \code{concourse quickstart --help} for
  more information).

  The addition of the \code{--external-url} flag is not technically necessary,
  so if you're just testing things it's safe to omit it. Concourse uses it as a
  base when generating URLs to itself, so you won't want those to be the
  default \code{http://127.0.0.1:8080} URL when you're developing on a
  different machine than the server.
}


\section{
  \title{Configuring Auth Providers}{auth-config}

  At startup, you will need to configure any local users or third-party auth
  providers that you wish to use with Concourse.

  In contrast to previous releases of Concourse, \code{users} are now central
  to the authentication flow. Instead of logging in as a team, you now log in
  as a user and can belong to one or more teams. Once users have been
  configured at startup, they can be added to a team by configuring the team's
  whitelist as described in \reference{authentication}.

  \section{
    \title{Local Auth}{local-auth-config}

    In order to add new users to the system, you can supply the
    \code{--add-local-user} flag to the \code{concourse web} subcommand like
    so:

    \codeblock{bash}{{{
    concourse web \
      --add-local-user myuser:mypass
    }}}
  }

  \section{
    \title{GitHub Auth}{github-auth-config}

    A Concourse server can authenticate against GitHub to take advantage of
    their permission model and other security improvements in their
    infrastructure.

    \section{
      \title{Creating a GitHub application}

      First you need to \link{create an OAuth application on
      GitHub}{https://github.com/settings/applications/new}.

      The callback URL will be the external URL of your Concourse server with
      \code{/sky/dex/callback} appended. For example, Concourse's own CI
      server's callback URL would be
      \code{https://ci.concourse-ci.org/sky/dex/callback}.
    }

    \section{
      \title{Configuring the client}

      You will be given a Client ID and a Client Secret for your new
      application. These will then be passed to the following flags:

      \list{
        \code{--github-client-id=CLIENT_ID}
      }{
        \code{--github-client-secret=CLIENT_SECRET}
      }

      If you're configuring GitHub Enterprise, you'll also need to set the
      following flags:

      \list{
        \code{--github-host=github.example.com}
      }{
        \code{--github-ca-cert=/tmp/some-cert}
      }

      The GitHub Enterprise host should not contain a scheme, or a trailing
      slash.

      \codeblock{bash}{{{
      concourse web \
        --github-client-id CLIENT_ID \
        --github-client-secret CLIENT_SECRET
      }}}
    }
  }

  \section{
    \title{CF Auth}{cf-auth-config}

    \section{
      \title{Creating the client}

      You'll first need to create a client for Concourse in UAA.

      The callback URL will be the external URL of your Concourse server with
      \code{/sky/dex/callback} appended. For example, Concourse's own CI
      server's callback URL would be
      \code{https://ci.concourse-ci.org/sky/dex/callback}.

      The client should look something like this, under
      \link{\code{uaa.clients}}{http://bosh.io/jobs/uaa?source=github.com/cloudfoundry/uaa-release&version=13#p=uaa.clients}:

      \codeblock{yaml}{{
        concourse:
          id: my-client-id
          secret: my-client-secret
          scope: openid,email,profile,roles
          authorized-grant-types: "authorization_code,refresh_token"
          access-token-validity: 3600
          refresh-token-validity: 3600
          redirect-uri: https://concourse.example.com/sky/dex/callback
      }}
    }

    \section{
      \title{Configuring the client}

      You will be given a Client ID and a Client Secret for your new
      application. These will then be passed to the following flags:

      \list{
        \code{--cf-client-id=CLIENT_ID}
      }{
        \code{--cf-client-secret=CLIENT_SECRET}
      }

      You will also need to configure your base API URL for CF. We will use
      this url to discover information used for authentication.

      \list{
        \code{--cf-api-url=CF_API_URL}
      }

      \codeblock{bash}{{{
      concourse web \
        --cf-client-id CLIENT_ID \
        --cf-client-secret CLIENT_SECRET \
        --cf-api-url CF_API_URL
      }}}
    }
  }

  \section{
    \title{Generic OIDC}{generic-oidc-config}

    If your auth provider adheres to the OIDC specification then you should use
    this provider. Unlike the oAuth provider you don't need to provide the
    \code{auth-url}, \code{token-url} and \code{userinfo-url}. Instead you
    can simply provide an \code{issuer-url} and the system will query the
    \code{.well-known/openid-configuration} endpoint to discover all the
    information it needs.

    \section{
      \title{Creating the client}

      You'll first need to create a client with your OIDC provider.

      The callback URL will be the external URL of your Concourse server with
      \code{/sky/dex/callback} appended. For example, Concourse's own CI
      server's callback URL would be
      \code{https://ci.concourse-ci.org/sky/dex/callback}.
    }

    \section{
      \title{Configuring the client}

      Configuring generic OIDC for X company's internal OIDC service may look
      something like:

      \codeblock{bash}{{{
      $ concourse web \
          --oidc-display-name='X' \
          --oidc-client-id=CLIENT_ID \
          --oidc-client-secret=CLIENT_SECRET \
          --oidc-issuer=https://oidc.example.com
      }}}
    }
  }

  \section{
    \title{Generic oAuth}{generic-oauth-config}

    If your auth provider supports oAuth2 but doesn't adhere to the OIDC
    specification then you should be using this provider. It's mostly the same
    as the OIDC provider except it gives you more control over specifying the
    full set of authorization endpoints (\code{auth-url}, \code{token-url}).

    \section{
      \title{Creating the client}

      First you'll need to create a client with your oAuth provider.

      The callback URL will be the external URL of your Concourse server with
      \code{/sky/dex/callback} appended. For example, Concourse's own CI
      server's callback URL would be
      \code{https://ci.concourse-ci.org/sky/dex/callback}.
    }

    \section{
      \title{Configuring the client}

      Configuring generic oAuth for X company's internal oAuth service may look
      something like:

      \codeblock{bash}{{{
      $ concourse web \
          --oauth-display-name='X' \
          --oauth-client-id=CLIENT_ID \
          --oauth-client-secret=CLIENT_SECRET \
          --oauth-auth-url=https://oauth.example.com/oauth2/auth \
          --oauth-token-url=https://oauth.example.com/oauth2/token \
          --oauth-userinfo-url=https://oauth.example.com/oauth2/userinfo
      }}}
    }
  }

  \section{
    \title{Future providers}

    Concourse uses a fork of \link{coreos/dex}{https://github.com/coreos/dex}
    for its authentication. Adding a new OAuth provider is as simple as
    submiting a pull request to our fork at
    \link{concourse/dex}{https://github.com/concourse/dex} and then adding a
    bit of configuration to
    \link{concourse/skymarshal}{https://github.com/concourse/skymarshal}.
  }

  For more auth provider configuration options, take a look at \code{concourse
  web} subcommand's help section.
}

\section{
  \title{Multi-node Cluster}{cluster}

  Beyond \code{quickstart}, the Concourse binary includes separate commands for
  running a multi-node cluster. This is necessary for either high-availability
  or just being able to run things across more than one worker.

  \section{
    \title{Generating Keys}{generating-keys}

    First, you'll need to generate 3 private keys (well, 2, plus 1 for each
    worker):

    \definitions{
      \definition{\code{session_signing_key} (currently must be RSA)}{
        Used for signing user session tokens, and by the TSA to sign its own
        tokens in the requests it makes to the ATC.
      }
    }{
      \definition{\code{tsa_host_key}}{
        Used for the TSA's SSH server. This is the key whose fingerprint you
        see when the \code{ssh} command warns you when connecting to a host it
        hasn't seen before.
      }
    }{
      \definition{\code{worker_key} (one per worker)}{
        Used for authorizing worker registration. There can actually be an
        arbitrary number of these keys; they are just listed to authorize
        worker SSH access.
      }
    }

    To generate these keys, run:

    \codeblock{bash}{{
    ssh-keygen -t rsa -f tsa_host_key -N ''
    ssh-keygen -t rsa -f worker_key -N ''
    ssh-keygen -t rsa -f session_signing_key -N ''
    }}

    ...and we'll also start on an \code{authorized_keys} file, currently
    listing this initial worker key:

    \codeblock{bash}{{
    cp worker_key.pub authorized_worker_keys
    }}
  }

  \section{
    \title{Running \code{web} Nodes}

    The \code{concourse} binary can run a \reference{web-node} via the
    \code{web} subcommand, like so:

    \codeblock{bash}{{{
    concourse web \
      --add-local-user myuser:mypass \
      --main-team-local-user myuser \
      --session-signing-key session_signing_key \
      --tsa-host-key tsa_host_key \
      --tsa-authorized-keys authorized_worker_keys \
      --external-url http://my-ci.example.com
    }}}

    Just as with \reference{quickstart}, this example is configuring local auth
    for the \reference{main-team}, and assumes a local PostgreSQL server.
    You'll want to consult \code{concourse web --help} for more configuration
    options.

    The \reference{web-node} can be scaled up for high availability, and
    they'll also roughly share their scheduling workloads, using the database
    to synchronize. This is done by just running more \code{web} commands on
    different machines, and optionally putting them behind a load balancer.

    To run a cluster of \reference{web-node}s, you'll just need to pass the
    following flags:

    \list{
      The \code{--postgres-*} flags must all be set to the same database.
    }{
      The \code{--peer-url} flag must be specified as a URL used to reach the
      individual \reference{web-node}, from other \code{web} nodes. So this
      just has to be a URL reachable within their private network, e.g. a
      \code{10.x.x.x} address.
    }{
      The \code{--external-url} should be the URL used to reach \italic{any}
      ATC, i.e. the URL pointing to your load balancer.
    }

    For example:

    Node 0:

    \codeblock{bash}{{{
    concourse web \
      --add-local-user myuser:mypass \
      --main-team-local-user myuser \
      --session-signing-key session_signing_key \
      --tsa-host-key tsa_host_key \
      --tsa-authorized-keys authorized_worker_keys \
      --postgres-host 10.0.32.0 \
      --postgres-user user \
      --postgres-password pass \
      --postgres-database concourse \
      --external-url https://ci.example.com \
      --peer-url http://10.0.16.10:8080
    }}}

    Node 1 (only difference is \code{--peer-url}):

    \codeblock{bash}{{{
    concourse web \
      --add-local-user myuser:mypass \
      --main-team-local-user myuser \
      --session-signing-key session_signing_key \
      --tsa-host-key tsa_host_key \
      --tsa-authorized-keys authorized_worker_keys \
      --postgres-host 10.0.32.0 \
      --postgres-user user \
      --postgres-password pass \
      --postgres-database concourse \
      --external-url https://ci.example.com \
      --peer-url http://10.0.16.11:8080
    }}}
  }

  \section{
    \title{Running \code{worker} Nodes}{standalone-workers}

    The \code{concourse} binary can run a \reference{worker-node} via the
    \code{worker} subcommand, like so:

    \codeblock{bash}{{{
    sudo concourse worker \
      --work-dir /opt/concourse/worker \
      --tsa-host 127.0.0.1:2222 \
      --tsa-public-key tsa_host_key.pub \
      --tsa-worker-private-key worker_key
    }}}

    Note that the worker must be run as \code{root}, as it orchestrates
    containers.

    You may want a few workers, depending on the resource usage of your
    pipeline. There should be one per machine; running multiple on one box
    doesn't really make sense, as each worker runs as many containers as
    Concourse requests of it.

    The \code{--work-dir} flag specifies where container data should be placed.
    Make sure it has plenty of disk space available, as it's where all the disk
    usage across your builds and resources will end up.

    The \code{--tsa-host} refers to wherever the TSA on your
    \reference{web-node} is listening. This may be an address to a load
    balancer if you're running multiple \code{web} nodes, or just a local
    address like \code{127.0.0.1:2222} if you're running everything on one box.

    The \code{--tsa-public-key} flag is used to ensure we're connecting to the
    TSA we should be connecting to, and is used like \code{known_hosts} with
    the \code{ssh} command. Refer to \reference{generating-keys} if you're not
    sure what this means.

    The \code{--tsa-worker-private-key} flag specifies the key to use when
    authenticating to the TSA. Refer to \reference{generating-keys} if you're
    not sure what this means.

    Workers have a statically configured \code{platform} and a set of
    \code{tags}, both of which determine where steps in a
    \reference{build-plans}{Build Plan} are scheduled.

    The Linux \code{concourse} binary comes with
    \reference{included-resources}{a set of core resource types} baked in. If
    you are planning to use them you need to have at least one Linux worker.
  }

  \section{
    \title{Community Installation Tools}{community-installation}

    \warn{
      These are installation tools built by the community. Use at your own risk!
    }

    \link{Concourse Up}{https://github.com/EngineerBetter/concourse-up} by \ghuser{EngineerBetter}.
    A tool for easily deploying Concourse in a single command.

    \link{Concourse Helm Chart}{https://github.com/kubernetes/charts/tree/master/stable/concourse}.
    The latest stable Helm chart for deploying Concourse into k8s. \bold{Official support coming soon.}

    \link{Concourse Formula}{https://github.com/marco-m/concourse-ci-formula} by \ghuser{marco-m}.
    All-in-one Concourse installation using Vagrant and Virutalbox with S3-compatible storage and Vault secret manager.

    \link{BUCC}{https://github.com/starkandwayne/bucc} by \ghuser{starkandwayne}.
    The \code{bucc} command line utility allows for easy bootstrapping of the BUCC stack (BOSH UA Credhub and Concourse). Which is the starting point for many deployments.

  }

}
