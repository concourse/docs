\title{Basic Schemas}

\use-plugin{concourse-docs}

Throughout the Concourse documentation you will come across schema
definitions for each API.

The following are basic schema definitions that the other schemas refer to. You
can probably skip past this and just make assumptions along the way; this is
just here for completeness!

\schema{number}{
  Any integer, i.e. \code{1000}.
}

\schema{string}{
  An arbitrary string value with no content restrictions.
}

\schema{config}{
  An arbitrary object representing configuration that is not directly
  interpreted by Concourse - typically given to a
  \reference{resource-types}{resource type}.

  \codeblock{yaml}{{{
  uri: https://github.com/vito/booklit
  branch: master
  }}}

  All object keys must be strings, preferably \code{snake_cased}.
}

\schema{vars}{
  An arbitrary object representing key-value definitions for
  \reference{vars}{\code{((vars))}}.

  As with \reference{schema.config}, all object keys must be strings,
  preferably \code{snake_cased}.
}

\schema{env-vars}{
  An object containing string keys and string values. Each pair represents an
  environment variable to set to the given value.

  \codeblock{yaml}{{{
  SOME_SIMPLE_VAR: simple-var
  SOME_LONG_VAR: |
    This is an example of using YAML multi-line string syntax to set a very
    long environment variable value.
  SOME_NUMERIC_VALUE: "1"
  }}}

  Note that in the last example we took special care to quote the number.
}

\schema{boolean}{
  \code{true} or \code{false}.

  YAML also supports the alias \code{yes}, \code{no}, \code{on}, or \code{off},
  but...please don't.
}

\schema{value}{
  An arbitrary YAML value. May be a \reference{schema.number},
  \reference{schema.string}, \reference{schema.boolean},
  \reference{schema.config}, or a \code{[\reference{schema.value}]}.

  \codeblock{yaml}{{{
  values:
  - 123
  - bar
  - true
  - key1: abc
    key2: def
  - [hello, world]
  }}}
}

\schema{identifier}{
  An \italic{identifier} is a string value. The following defines the allowed
  character set for an \italic{identifier}:

  \list{
    Unicode lowercase letters, while still supporting languages that don't
    have any casing (e.g. Japanese).
  }{
    Decimal numbers.
  }{
    Hyphens \code{-} and underscores \code{_} as word separators.
  }{
    Periods \code{.} in order to support domain names and version numbers.
  }

  The validation rule is as follows:

  \codeblock{regex}{{{
    ^[\p{Ll}\p{Lt}\p{Lm}\p{Lo}\d][\p{Ll}\p{Lt}\p{Lm}\p{Lo}\d\-_.]*$
  }}}

  Where all \italic{identifier} must start with a Unicode lowercase letter or
  number, followed by any number of allowed characters.

  Currently, the validation will only show as warnings. For the sake of
  future-proofing, you may want to conform to it.
}

\schema{dir-path}{
  A string value specifying a (typically relative) path of a directory.
}

\schema{file-path}{
  A string value specifying a (typically relative) path of a file.
}

\schema{duration}{
  A string value in \link{Go \code{time.ParseDuration}
  format}{https://golang.org/pkg/time/#ParseDuration}. \code{1h} for one hour,
  \code{5m} for 5 minutes.
}

\schema{version}{
  An object with string keys and string values.

  The following is an array of versions:

  \codeblock{yaml}{{{
    - {"ref": "33042e15e930b6786fc9b0a9ea5dec78689c5e4b"}
    - ref: v1.2.0,
      sha: 33042e15e930b6786fc9b0a9ea5dec78689c5e4b
    - foo: "0"
  }}}

  Note that in the last example we took special care to quote the number.

  In many scenarios where a version can be specified, e.g.
  \reference{schema.get.version}, only a subset of the full set of fields is
  necessary. The latest version matching the fields specified will be chosen.
}
