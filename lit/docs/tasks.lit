\title{Tasks}{tasks}

\use-plugin{concourse-docs}

The smallest configurable unit in a Concourse pipeline is a single task. A task
can be thought of as a function from \reference{schema.task-config.inputs} to
\reference{schema.task-config.outputs} that can either succeed or fail.

Going a bit further, ideally tasks are \italic{pure} functions: given the same
set of inputs, it should either always succeed with the same outputs or always
fail. This is entirely up to your script's level of discipline, however. Flaky
tests or dependencies on the internet are the most common source of impurity.

Once you have a running Concourse deployment, you can start configuring your
tasks and executing them interactively from your terminal with the
\reference{fly-cli}{Fly} commandline tool.

Once you've figured out your task's configuration, you can reuse it for a
\reference{jobs}{Job} in your \reference{pipelines}{Pipeline}.

Conventionally a task's configuration is placed in the same repository as the
code it's testing, possibly under some \code{ci} directory.

A task's configuration specifies the following:

\schema{task-config}{
  \required-attribute{platform}{`linux` | `darwin` | `windows`}{
    The platform the task should run on. This determines the pool of workers
    that the task can run against.

    Technically any string value is allowed so long as a worker advertises the
    same platform, but in practice only \code{linux}, \code{darwin}, and
    \code{windows} are in use.
  }

  \required-attribute{image_resource}{anonymous_resource}{
    The container image to run with, as provided by an anonymous
    \reference{resources}{resource} definition.

    Whenever the task runs, the anonymous resource will be \code{check}ed to
    discover the latest version available. The image will then be fetched onto
    the worker, if necessary, just prior to running the task.

    To use an image provided by a previous step within your build plan, set
    \reference{schema.task.image} on the \reference{task-step}
    instead.

    \aside{
      \bold{NOTE:} This field is only required for tasks targeting the
      \reference{schema.task-config.platform}{Linux platform}. This field will be
      ignored for Windows and Darwin workers. Windows containers are currently
      not supported and Darwin does not have native containers. The task will
      run inside a clean temporary directory on the Windows/Darwin worker with
      any inputs and outputs copied into the same directory. Any dependencies
      should be pre-installed on the worker.
    }

    \example-toggle{Using the \code{golang} Docker image}{
      The following task config will use the \link{\code{golang} Docker
      image}{https://hub.docker.com/_/golang} to run \code{go version}:

      \codeblock{yaml}{{{
      platform: linux

      image_resource:
        type: registry-image
        source: {repository: golang}

      run:
        path: go
        args: [version]
      }}}
    }

    \schema{anonymous_resource}{
      \required-attribute{type}{resource_type.name}{
        The type of the resource. Usually \code{registry-image}.

        You can use any resource type that returns a filesystem in the correct
        format: a \code{/rootfs} directory containing a full filesystem, and a
        \code{metadata.json} file containing.
      }

      \required-attribute{source}{config}{
        The configuration for the resource; see
        \reference{schema.resource.source}.
      }

      \optional-attribute{params}{config}{
        A map of arbitrary configuration to forward to the resource. Refer to the
        resource type's documentation to see what it supports.
      }

      \optional-attribute{version}{version}{
        A specific version of the resource to fetch. This should be a map with
        string keys and values. If not specified, the latest version will be
        fetched.
      }
    }
  }

  \optional-attribute{inputs}{[input]}{
    The set of artifacts used by task, determining which artifacts will be
    available in the current directory when the task runs.

    These are satisfied by \reference{get-step}s or
    \reference{schema.task-config.outputs} of a previous task. These can also
    be provided by \code{-i} with \reference{fly-execute}.

    If any required inputs are missing at run-time, then the task will error
    immediately.

    \schema{input}{
      \required-attribute{name}{identifier}{
        The name of the input.
      }

      \optional-attribute{path}{dir-path}{
        The path where the input will be placed. If not specified, the input's
        \code{name} is used.

        Paths are relative to the working directory of the task unless an
        absolute path is given. An absolute path is any path that starts with a
        forward slash \code{/}. We recommend only using relative paths unless
        you have a strong technical reason to use absolute paths.

        Any parent directory references (\code{../}) in the path will be removed.
      }

      \optional-attribute{optional}{boolean}{
        \italic{Default \code{false}.} If \code{true}, then the input is not
        required by the task. The task may run even if this input is missing.

        An \code{optional} input that is missing will not appear in the current
        directory of the running task.
      }
    }
  }

  \optional-attribute{outputs}{[output]}{
    The artifacts produced by the task.

    Each output configures a directory to make available to later steps in the
    \reference{build-plans}{build plan}. The directory will be automatically
    created before the task runs, and the task should place any artifacts it
    wants to export in the directory.

    \schema{output}{
      \required-attribute{name}{identifier}{
        The name of the output. The contents under \code{path} will be made
        available to the rest of the plan under this name.
      }

      \optional-attribute{path}{dir-path}{
        The path to a directory where the output will be taken from. If not
        specified, the output's \code{name} is used.

        Paths are relative to the working directory of the task unless an
        absolute path is given. An absolute path is any path that starts with a
        forward slash \code{/}. We recommend only using relative paths unless
        you have a strong technical reason to use absolute paths.

        Any parent directory references (\code{../}) in the path will be removed.
      }
    }
  }

  \optional-attribute{caches}{[cache]}{
    The cached directories shared between task runs.

    On the task's first run, all cache directories will be empty. It is the
    responsibility of the task to populate these directories with any artifacts
    to be cached. On subsequent runs, the cached directories will contain those
    artifacts.

    Caches are scoped to the worker the task is run on, so you will not get a
    cache hit when subsequent builds run on different workers. This also means
    that caching is not intended to share state between workers, and your task
    should be able to run whether or not the cache is warmed.

    Caches are also scoped to a particular task name inside of a pipeline's
    job. As a consequence, if the job name, step name or cache path are
    changed, the cache will not be used. This also means that caches do not
    exist for one-off builds.

    \schema{cache}{
      \required-attribute{path}{dir-path}{
        The path to a directory to be cached.

        Paths are relative to the working directory of the task. Absolute paths
        are not respected.
      }
    }
  }

  \optional-attribute{params}{env-vars}{
    A key-value mapping of string keys and values that are exposed to the task
    via environment variables.

    Pipelines can override these params by setting
    \reference{schema.task.params} on the \reference{task-step}. This is a common
    method of providing credentials to a task.
  }

  \required-attribute{run}{command}{
    The command to execute in the container.

    Note that this is \italic{not} provided as a script blob, but explicit
    \code{path} and \code{args} values; this allows \code{fly} to forward
    arguments to the script, and forces your config \code{.yml} to stay fairly
    small.

    \schema{command}{
      \required-attribute{path}{file-path}{
        The name of or path to the executable to run.

        \code{path} is relative to the working directory. If \code{dir} is
        specified to set the working directory, then \code{path} is relative to
        it.

        This is commonly a path to a script provided by one of the task's inputs,
        e.g. \code{my-resource/scripts/test}. It could also be a command like
        \code{bash} (respecting standard \code{$PATH} lookup rules), or an absolute
        path to a file to execute, e.g. \code{/bin/bash}.
      }

      \optional-attribute{args}{[string]}{
        Arguments to pass to the command. Note that when executed with
        \reference{fly-cli}{Fly}, any arguments passed to \reference{fly-execute}
        are appended to this array.
      }

      \optional-attribute{dir}{dir-path}{
        A directory, relative to the initial working directory, to set as the
        working directory when running the script.
      }

      \optional-attribute{user}{string}{
        Explicitly set the user to run as. If not specified, this defaults to the
        user configured by the task's image. If not specified there, it's up to
        the Garden backend, and may be e.g. \code{root} on Linux.
      }
    }
  }

  \optional-attribute{rootfs_uri}{string}{
    A string specifying the rootfs uri of the container, as interpreted by your
    worker's Garden backend.

    \reference{schema.task-config.image_resource} is the preferred way to specify base image.
    You should only use this if you have no other option and you really know
    what you're doing.
  }

  \optional-attribute{container_limits}{container_limits}{
    CPU and memory limits to enforce on the task container.

    Note that these values, when specified, will override any limits set by
    passing the \code{--default-task-cpu-limit} or
    \code{--default-task-memory-limit} flags to the \code{concourse web} command.

    \schema{container_limits}{
      \optional-attribute{cpu}{number}{
        The maximum amount of CPU available to the task container, measured in
        shares. 0 means unlimited.

        CPU shares are relative to the CPU shares of other containers on a
        worker. For example, if you have two containers both with a CPU
        limit of 2 shares then each container will get 50% of the CPU's time.

        \codeblock{}{{{
          Container A: 2 shares - 50% CPU
          Container B: 2 shares - 50% CPU
          Total CPU shares declared: 4
        }}}

        If you introduce another container then the number of CPU time per
        container changes. CPU shares are relative to each other.
        \codeblock{}{{{
          Container A: 2 shares - 25% CPU
          Container B: 2 shares - 25% CPU
          Container C: 4 shares - 50% CPU
          Total CPU shares declared: 8
        }}}
      }

      \optional-attribute{memory}{number}{
        The maximum amount of memory available to the task container, measured in
        bytes. 0 means unlimited.
      }
    }
  }
}

\example-toggle{Testing a Ruby app}{
  This configuration specifies that the task must run with the
  \code{ruby:2.1} Docker image with a \code{my-app} input, and when the task
  is executed it will run the \code{scripts/test} script in the same repo.

  \codeblock{yaml}{{
  ---
  platform: linux

  image_resource:
    type: registry-image
    source:
      repository: ruby
      tag: '2.1'

  inputs:
  - name: my-app

  run:
    path: my-app/scripts/test
  }}
}

\example-toggle{Producing outputs from a task}{
  A task can configure \reference{schema.task-config.outputs} to produce artifacts that can
  then be propagated to a \reference{put-step} or another
  \reference{task-step} in the same plan. They can also be downloaded with
  \reference{fly-execute} by passing \code{-o}.

  \codeblock{yaml}{{
    ---
    platform: linux

    image_resource: # ...

    inputs:
    - name: project-src

    outputs:
    - name: built-project

    run:
      path: project-src/ci/build
  }}

  ...assuming \code{project-src/ci/build} looks something like:

  \codeblock{bash}{{
    #!/bin/bash

    set -e -u -x

    export GOPATH=$PWD/project-src

    go build -o built-project/my-project \\
      github.com/concourse/my-project
  }}

  ...this task could then be used in a \reference{build-plans}{build plan}
  like so:

  \codeblock{yaml}{{
    plan:
    - get: project-src
    - task: build-bin
      file: project-src/ci/build.yml
    - put: project-bin
      params: {file: built-project/my-project}
  }}
}

\example-toggle{Caching ephemeral state}{
  The following task and script could be used by a Node project to cache the
  \code{node_modules} directory:

  \codeblock{yaml}{{
  ---
  platform: linux

  image_resource: # ...

  inputs:
  - name: project-src

  caches:
  - path: project-src/node_modules

  run:
    path: project-src/ci/build
  }}

  ...assuming \code{project-src/ci/build} looks something like:

  \codeblock{bash}{{
  #!/bin/bash

  set -e -u -x

  cd project-src
  npm install

  # ...
  }}

  ...this task would cache the contents of \code{project-src/node_modules}
  between runs of this task on the same worker.
}

\example-toggle{Using an image from a private Docker registry}{
  The following external task uses an image from a private registry. Assuming the CA
  is configured properly on the workers, SSL should Just Work™.

  External tasks are now fully interpolated using \reference{creds}{credential manager variables} and
  \reference{schema.task.vars}, so you can use template variables in an external task:

  \codeblock{yaml}{{{
    ---
    platform: linux

    image_resource:
      type: registry-image
      source:
        repository: my.local.registry:8080/my/image
        username: ((myuser))
        password: ((mypass))

    inputs:
    - name: my-app

    run:
      path: my-app/scripts/test
      args: ["Hello, world!", "((myparam))"]
  }}}
}

\table-of-contents

\include-section{tasks/running.lit}
\include-section{tasks/environment.lit}
