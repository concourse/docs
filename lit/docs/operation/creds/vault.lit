\title{\aux{The }Vault credential manager}{vault-credential-manager}

\use-plugin{concourse-docs}
\omit-children-from-table-of-contents

Concourse can be configured to pull credentials from a
\link{Vault}{https://vaultproject.io} instance.

To configure this, first configure the URL of your Vault server by setting the
following env on the \reference{web-node}:

\codeblock{bash}{{{
CONCOURSE_VAULT_URL=https://vault.example.com:8200
}}}

You may also need to configure the CA cert for Vault:

\codeblock{bash}{{{
CONCOURSE_VAULT_CA_CERT=path/to/ca.crt
}}}

You'll also need to configure how the \code{web} node authenticates with Vault
- see \reference{authenticating-with-vault} for more details as that step is
quite involved.

\section{
  \title{Credential lookup rules}{vault-credential-lookup-rules}

  Vault lets you organize secrets into hierarchies, which is useful for when
  they should be accessible for particular pipelines or teams. When you have
  a parameter like \code{((foo))} in a pipeline definition, Concourse
  will (by default) look for it in the following paths, in order:

  \list{
    \code{/concourse/TEAM_NAME/PIPELINE_NAME/foo}
  }{
    \code{/concourse/TEAM_NAME/foo}
  }

  Vault credentials are actually key-value, so for \code{((foo))} Concourse will
  default to the field name \code{value}. You can specify the field to grab via
  \code{.} syntax, e.g. \code{((foo.bar))}.

  If you have multiple, intermediate levels in your path, you can use the \code{/}
  separator to reach your intended field, e.g. \code{((foo/bar/baz.qux))}.

  When executing a one-off task, there is no pipeline: so in this case, only the
  team path \code{/concourse/TEAM_NAME/foo} is searched.

  There are several ways to customize the lookup logic:

  \ordered-list{
    Add a "shared path", for secrets common to all teams.
  }{
    Change the team- and pipeline-dependent path templates.
  }{
    Change the path prefix from \code{/concourse} to something else.
  }{
    Set a \link{Vault namespace}{https://www.vaultproject.io/docs/enterprise/namespaces/}
    for isolation within a Vault Enterprise installation.
  }

  Each of these can be controlled by Concourse command line flags, or
  environment variables.

  \section{
    \title{Configuring a shared path}{vault-shared-path}

    A "shared path" can also be configured for credentials that you would like
    to share across all teams and pipelines, foregoing the default
    team/pipeline namespacing. Use with care!

    \codeblock{bash}{{{
    CONCOURSE_VAULT_SHARED_PATH=some-shared-path
    }}}

    This path must exist under the configured path prefix. The above
    configuration would correspond to \code{/concourse/some-shared-path} with
    the default \code{/concourse} prefix.
  }

  \section{
    \title{Changing the path templates}{vault-lookup-templates}

    You can choose your own list of templates, which will expand to team-
    or pipeline-specific paths. These are subject to the path prefix. By
    default, the templates used are:

    \codeblock{bash}{{{
    CONCOURSE_VAULT_LOOKUP_TEMPLATES=/{{.Team}}/{{.Pipeline}}/{{.Secret}}/{{.Team}}/{{.Secret}}
    }}}

    When secrets are to be looked up, these are evaluated subject to the
    configured path prefix, where \code{\{\{.Team\}\}} expands to the
    current team, \code{\{\{.Pipeline\}\}} to the current pipeline (if any),
    and \code{\{\{.Secret\}\}} to the name of the secret. So if the
    settings are:

    \codeblock{bash}{{{
    CONCOURSE_VAULT_PATH_PREFIX=/secrets
    CONCOURSE_VAULT_LOOKUP_TEMPLATES=/{{.Team}}/concourse/{{.Pipeline}}/{{.Secret}}/{{.Team}}/concourse/{{.Secret}}/common/{{.Secret}}
    }}}

    and \code{((password))} is used in team \code{myteam} and pipeline
    \code{mypipeline}, Concourse will look for the following, in order:

    \ordered-list{
      \code{/secrets/myteam/concourse/mypipeline/password}
    }{
      \code{/secrets/myteam/concourse/password}
    }{
      \code{/secrets/common/password}
    }
  }

  \section{
    \title{Changing the path prefix}{vault-path-prefix}

    The leading \code{/concourse} can be changed by specifying the following:

    \codeblock{bash}{{{
    CONCOURSE_VAULT_PATH_PREFIX=/some-other-prefix
    }}}
  }

  \section{
    \title{Using a Vault namespace}{vault-namespace}

    If you are using Vault Enterprise, you can make secret lookups and
    authentication happen under a namespace.

    \codeblock{bash}{{{
    CONCOURSE_VAULT_NAMESPACE=chosen/namespace/path
    }}}

    This setting applies to all teams equally.
  }

}

\section{
  \title{Configuring the secrets engine}

  Concourse is currently limited to looking under a single path, meaning
  enabling only one secrets engine is supported: \code{kv}, or \code{kv_v2}.
  This may change in the future - we're still collecting ideas in \link{RFC
  #21}{https://github.com/concourse/rfcs/pull/21}.

  Using kv version 2 enables versioned secrets and the ability to restore
  previous versions or deleted secrets. Concourse will read the latest version
  of a secret at all times and if it is deleted it will appear as if the secret
  does not exist. More information regarding the Vault KV backend and the
  differences in versions can be found
  \link{here}{https://www.vaultproject.io/docs/secrets/kv}.

  So, let's configure the \code{kv} secrets engine and mount it at
  \code{/concourse}:

  \codeblock{bash}{{{
  $ vault secrets enable -version=1 -path=concourse kv
  }}}

  To enable kv_v2 and versioned secrets:
  \codeblock{bash}{{{
  $ vault secrets enable -version=2 -path=concourse kv
  }}}

  Next, you'll want to create a policy to allow Concourse to read from this
  path.

  \codeblock{hcl}{{{
    path "concourse/*" {
      policy = "read"
    }
  }}}

  Save this to \code{concourse-policy.hcl}, and then run:

  \codeblock{bash}{{{
  vault policy write concourse ./concourse-policy.hcl
  }}}

  This configuration will allow Concourse to read all credentials under
  \code{/concourse}. This should match your configured path prefix.
}

\section{
  \title{Authenticating with Vault}

  There are many ways to authenticate with a Vault server. The \code{web-node}
  can be configured with either a token or an arbitrary auth backend and
  arbitrary auth params, so just about all of them should be configurable.

  When the \code{web} node acquires a token, either by logging in with an auth
  backend or by being given one directly, it will continuously renew the token
  to ensure it doesn't expire. The renewal interval is half of the token's
  lease duration.

  \section{
    \title{Using a periodic token}{vault-periodic-token}

    The simplest way to authenticate is by generating a periodic token:

    \codeblock{bash}{{{
    $ vault token create --policy concourse --period 1h
    Key                Value
    ---                -----
    token              s.mSNnbhGAqxK2ZbMasOQ91rIA
    token_accessor     0qsib5YcYvROm86cT08IFxIT
    token_duration     1h
    token_renewable    true
    token_policies     [concourse default]
    }}}

    \warn{
      Choose your \code{--period} wisely, as the timer starts counting down as
      soon as the token is created. You should also use a duration long enough
      to account for any planned \code{web} node downtime.
    }

    Once you have the token, just set the following env on the \code{web} node:

    \codeblock{bash}{{{
    CONCOURSE_VAULT_CLIENT_TOKEN=s.mSNnbhGAqxK2ZbMasOQ91rIA
    }}}

    Periodic tokens are the quickest way to get started, but they have one
    fatal flaw: if the \code{web} node is down for longer than the token's
    configured period, the token will expire and a new one will have to be
    created and configured. This can be avoided by using the
    \reference{vault-approle-auth}{\code{approle} auth backend}.
  }

  \section{
    \title{Using the \code{approle} auth backend}{vault-approle-auth}

    The
    \link{\code{approle}}{https://www.vaultproject.io/docs/auth/approle.html}
    backend allows for an \italic{app} (in this case, Concourse) to
    authenticate with a \italic{role} pre-configured in Vault.

    With this backend, the \reference{web-node} is configured with a
    \code{role_id} corresponding to a pre-configured role, and a
    \code{secret_id} which is used to authenticate and acquire a token.

    The \code{approle} backend must first be configured in Vault. Vault's
    \code{approle} backend allows for a few parameters which you may want to
    set to determine the permissions and lifecycle of its issued tokens:

    \definitions{
      \definition{\code{policies=names}}{
        This determines the policies (comma-separated) to set on each token. Be
        sure to set one that has access to the secrets path - see
        \reference{configuring-the-secrets-engine} for more information.
      }
    }{
      \definition{\code{token_ttl=duration}}{
        This determines the TTL for each token granted. The token can be
        continuously renewed, as long as it is renewed before the TTL elapses.
      }
    }{
      \definition{\code{token_max_ttl=duration}}{
        This sets a maximum lifetime for each token, after which the token can
        no longer be renewed.

        If configured, be sure to set the same value on the \code{web} node so
        that it can re-auth before this duration is reached:

        \codeblock{bash}{{{
        CONCOURSE_VAULT_AUTH_BACKEND_MAX_TTL=1h
        }}}
      }
    }{
      \definition{\code{period=duration}}{
        If configured, tokens issued will be
        \link{\italic{periodic}}{https://www.vaultproject.io/docs/concepts/tokens.html#periodic-tokens}.
        Periodic tokens are not bound by any configured max TTL, and can be
        renewed continuously. It does not make sense to configure both
        \code{period} and \code{token_max_ttl} as the max TTL will be ignored.
      }
    }{
      \definition{\code{token_num_uses=count}}{
        This sets a limit on how often a token can be used. \bold{We do not
        recommend setting this value}, as it will effectively hamstring
        Concourse after a few credential acquisitions. The \code{web} node does
        not currently know to re-acquire a token when this limit is reached.
      }
    }{
      \definition{\code{secret_id_ttl=duration} and \code{secret_id_num_uses=count}}{
        These two configurations will result in the secret ID expiring after
        the configured time or configured number of log-ins, respectively.

        You should only set these if you have something periodically
        re-generating secret IDs and re-configuring your \code{web} nodes
        accordingly.
      }
    }

    Given all that, a typical configuration may look something like this:

    \codeblock{bash}{{{
    $ vault auth enable approle
    Success! Enabled approle auth method at: approle/
    $ vault write auth/approle/role/concourse policies=concourse period=1h
    Success! Data written to: auth/approle/role/concourse
    }}}

    Now that the backend is configured, we'll need to obtain the \code{role_id}
    and generate a \code{secret_id}:

    \codeblock{bash}{{{
    $ vault read auth/approle/role/concourse/role-id
    Key        Value
    ---        -----
    role_id    5f3420cd-3c66-2eff-8bcc-0e8e258a7d18
    $ vault write -f auth/approle/role/concourse/secret-id
    Key                   Value
    ---                   -----
    secret_id             f7ec2ac8-ad07-026a-3e1c-4c9781423155
    secret_id_accessor    1bd17fc6-dae1-0c82-d325-3b8f9b5654ee
    }}}

    These should then be set on the \reference{web-node} like so:

    \codeblock{bash}{{{
      CONCOURSE_VAULT_AUTH_BACKEND="approle"
      CONCOURSE_VAULT_AUTH_PARAM="role_id:5f3420cd-3c66-2eff-8bcc-0e8e258a7d18,secret_id:f7ec2ac8-ad07-026a-3e1c-4c9781423155"
    }}}
  }

  \section{
    \title{Using the \code{cert} auth backend}{vault-cert-auth}

    The \link{\code{cert}}{https://www.vaultproject.io/docs/auth/cert.html}
    auth method allows authentication using SSL/TLS client certificates.

    With this backend, the \reference{web-node} is configured with a client
    cert and a client key. Vault must be configured with TLS, which you should
    be almost certainly be doing anyway.

    The \code{cert} backend must first be configured in Vault. The backend is
    associated to a policy and a CA cert used to verify the client certificate.
    It may also be given the client certificate itself.

    The \code{cert} backend must first be configured in Vault. Vault's
    \code{cert} backend allows for a few parameters which you may want to
    set to determine the lifecycle of its issued tokens:

    \definitions{
      \definition{\code{policies=names}}{
        This determines the policies (comma-separated) to set on each token. Be
        sure to set one that has access to the secrets path - see
        \reference{configuring-the-secrets-engine} for more information.
      }
    }{
      \definition{\code{ttl=duration}}{
        This determines the TTL for each token granted. The token can be
        continuously renewed, as long as it is renewed before the TTL elapses.
      }
    }{
      \definition{\code{max_ttl=duration}}{
        This sets a maximum lifetime for each token, after which the token can
        no longer be renewed.

        If configured, be sure to set the same value on the \code{web} node so
        that it can re-auth before this duration is reached:

        \codeblock{bash}{{{
        CONCOURSE_VAULT_AUTH_BACKEND_MAX_TTL=1h
        }}}
      }
    }{
      \definition{\code{period=duration}}{
        If configured, tokens issued will be
        \link{\italic{periodic}}{https://www.vaultproject.io/docs/concepts/tokens.html#periodic-tokens}.
        Periodic tokens are not bound by any configured max TTL, and can be
        renewed continuously. It does not make sense to configure both
        \code{period} and \code{max_ttl} as the max TTL will be ignored.
      }
    }

    \codeblock{bash}{{{
    $ vault auth enable cert
    Success! Enabled cert auth method at: cert/
    $ vault write auth/cert/certs/concourse policies=concourse certificate=@out/vault-ca.crt ttl=1h
    Success! Data written to: auth/cert/certs/concourse
    }}}

    Once that's all set up, you'll just need to configure the client cert and
    key on the \code{web} node like so:

    \codeblock{bash}{{{
      CONCOURSE_VAULT_AUTH_BACKEND="cert"
      CONCOURSE_VAULT_CLIENT_CERT=vault-certs/concourse.crt
      CONCOURSE_VAULT_CLIENT_KEY=vault-certs/concourse.key
    }}}

    In this case no additional auth params are necessary, as the Vault's TLS
    auth backend will check the certificate against all roles if no name is
    specified.
  }
}

\right-side{Examples}{
  \example{Docker Compose, Vault, \code{cert} auth}{
    Configuring Vault with TLS cert-based auth involves a few moving parts. The
    following example is not really meant for production, but hopefully it
    makes everything easier to understand by seeing how all the parts fit
    together.

    First, grab the Docker Compose quick-start:

    \codeblock{bash}{{{
    $ wget https://concourse-ci.org/docker-compose.yml
    }}}

    Next, let's generate all the certificates using
    \link{\code{certstrap}}{https://github.com/square/certstrap} like so:

    \codeblock{bash}{{{
    certstrap init --cn vault-ca
    certstrap request-cert --domain vault --ip 127.0.0.1
    certstrap sign vault --CA vault-ca
    certstrap request-cert --cn concourse
    certstrap sign concourse --CA vault-ca
    mv out vault-certs
    }}}

    Next we'll configure the Vault server to use the certs we made by creating
    \code{vault-config/config.hcl}:

    \codeblock{hcl}{{{
    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_cert_file = "/vault/certs/vault.crt"
      tls_key_file = "/vault/certs/vault.key"
    }

    storage "file" {
      path = "/vault/file"
    }
    }}}

    Next, let's create a \code{docker-compose.override.yml} override that will
    add Vault and configure cert-based auth:

    \codeblock{yaml}{{{
    version: '3'

    services:
      concourse:
        volumes:
        - ./vault-certs:/vault-certs
        environment:
          CONCOURSE_VAULT_URL: https://vault:8200
          CONCOURSE_VAULT_AUTH_BACKEND: cert
          CONCOURSE_VAULT_CA_CERT: /vault-certs/vault-ca.crt
          CONCOURSE_VAULT_CLIENT_CERT: /vault-certs/concourse.crt
          CONCOURSE_VAULT_CLIENT_KEY: /vault-certs/concourse.key

      vault:
        image: vault
        cap_add: [IPC_LOCK]
        ports: ["8200:8200"]
        volumes:
        - ./vault-certs:/vault/certs
        - ./vault-config:/vault/config
        command: server
    }}}

    From here, we just need to spin up the cluster:

    \codeblock{bash}{{{
    $ docker-compose up
    }}}

    And...now everything should start blowing up! Vault is still sealed, so
    \reference{web-node} can't log in.

    Let's initialize Vault:

    \codeblock{bash}{{{
    $ export VAULT_CACERT=$PWD/vault-certs/vault-ca.crt
    $ vault operator init
    }}}

    Make note of the 5 unseal keys and the root token, then run the following:

    \codeblock{bash}{{{
    $ vault operator unseal # paste unseal key 1
    $ vault operator unseal # paste unseal key 2
    $ vault operator unseal # paste unseal key 3
    $ vault login           # paste root token
    }}}

    At this point Vault is unsealed and ready to go, except we haven't
    configured the \code{cert} backend yet.

    First let's create a policy for Concourse, \code{concourse-policy.hcl}:

    \codeblock{hcl}{{{
      path "concourse/*" {
        policy = "read"
      }
    }}}

    Save this to \code{concourse-policy.hcl}, and then run:

    \codeblock{bash}{{{
    $ vault policy write concourse ./concourse-policy.hcl
    Success! Uploaded policy: concourse
    $ vault auth enable cert
    Success! Enabled cert auth method at: cert/
    $ vault write auth/cert/certs/concourse \
        policies=concourse \
        certificate=@vault-certs/vault-ca.crt \
        ttl=1h
    }}}

    At this point the \code{web} node should be able to log in successfully.
  }
}
