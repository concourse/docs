\title{\aux{The }\code{fly} CLI}{fly}{fly-cli}

\use-plugin{concourse-docs}

The first step to getting started with Concourse is to install the \code{fly}
CLI tool. You can download \code{fly} from any Concourse installation by
clicking the download link in the bottom-right corner of the web UI.

Throughout the Concourse documentation we'll stick to the long-form name of
every command and flag. Once you've learned what the commands do, you may want
to consult \code{fly -h} to learn the short forms.

\table-of-contents

\section{
  \title{\code{fly login}}{fly-login}

  The first thing you'll want to do is authenticate with your target. This is
  done with the \reference{fly-login} command. This is also useful to save
  targets under a more convenient alias, so you don't have to type out the URL
  all the time:

  The \code{login} command serves double duty: it authenticates with a given
  endpoint, and saves it under a more convenient name. The name and token are
  stored in \code{~/.flyrc} (though you shouldn't really edit the file
  manually).

  Concourse deployments can be occupied by multiple \reference{teams}{teams}.
  To specify the team to which to log in, specify the \code{--team-name} or
  \code{-n} flag. If not specified, this defaults to the \reference{main-team}.

  So, to log in to a team \code{my-team} an endpoint served at
  \code{https://ci.example.com} and save it as the more convenient name
  \code{example}, you would run:

  \codeblock{bash}{{{
  $ fly --target example login --team-name my-team \
      --concourse-url https://ci.example.com
  }}}

  The \code{login} command will see which authentication methods are available
  for the specified team and prompt you to choose one. For basic auth, it will
  ask your username and password and use them to acquire a token. For OAuth, it
  will give you a link to click, and after you've gone through the OAuth flow
  it will print an OAuth token on the page that you can then copy and
  paste into the prompt.

  Note that if no authentication methods are configured, \code{fly} will
  acquire a token without any prompting. You can then use the alias like
  normal.

  In any case, a token is saved in your \code{~/.flyrc}, which will expire
  after one day.

  If your Concourse uses SSL but does not have a certificate signed by a
  trusted CA, you can use the \code{--ca-cert} flag so that \code{fly} can
  trust the connection, like so:

  \codeblock{bash}{{
  $ fly -t example login -c https://ci.example.com --ca-cert ./ca.crt
  }}

  This will read the value out of the file \code{./ca.crt} and save it into
  \code{~/.flyrc} so you don't have to pass it on every \code{login}
  invocation.

  If your Concourse instance is protected by a proxy server requiring client
  certificates, you can use \code{--client-cert} and \code{--client-key} to
  point to where your certificate is stored. These paths will be stored in
  \code{.flyrc} and the certificate will by attached to every request made to
  that target.

  \codeblock{bash}{{
  $ fly -t example login -c https://ci-example.com \\
      --client-cert ./client.pem \\
      --client-key ./client.key
  }}

  After you've logged in you can use \code{--target example} (or \code{-t
  example} for short) to run a command against the saved target \code{example}.
  For example, \code{fly -t example builds} will list the last few builds on the
  \code{example} Concourse instance.

  The \code{-t} flag is intentionally stateless and must be explicitly added
  to each command. This reduces the risk of accidentally running a command against the
  wrong environment when you have multiple targets defined.
}

\section{
  \title{\code{fly targets}}{fly-targets}

  To see what targets are currently known to \code{fly}, run:

  \codeblock{bash}{{
  $ fly targets
  }}

  This will show each target's name, URL, and when its token expires.
}

\section{
  \title{\code{fly status}}{fly-status}

  To check your current authentication status with a given target, run:

  \codeblock{bash}{{
  $ fly -t example status
  }}

  This will let you know if the token has expired.
}

\section{
  \title{\code{fly userinfo}}{fly-userinfo}

  To check what user you're logged in as, as well as which teams you are
  currently authenticated to and which roles within each team you have, run:

  \codeblock{bash}{{
  $ fly -t example userinfo
  }}
}

\section{
  \title{\code{fly logout}}{fly-logout}

  To clear out your token for a given target, run:

  \codeblock{bash}{{
  $ fly -t example logout
  }}

  To clear out your token for \italic{all} targets, run:

  \codeblock{bash}{{
  $ fly logout -a
  }}

  Note: These two variations are mutually exclusive. If the target parameter
  \code{-t} and all parameter \code{-a} are both specified, an error will
  occur.
}

\section{
  \title{\code{fly edit-target}}{fly-edit-target}

  To modify a target's name, team, or URL, run:

  \codeblock{bash}{{
  $ fly -t example edit-target \\
      --target-name new-name \\
      --concourse-url https://ci.example.com \\
      --team-name my-team
  }}

  Each flag is optional - only the specified flags will be changed.
}

\section{
  \title{\code{fly delete-target}}{fly-delete-target}

  When logging out just isn't enough, a target can be completely removed from
  \code{~/.flyrc} by running:

  \codeblock{bash}{{
  $ fly -t example delete-target
  }}

  To delete \italic{all} targets, run:

  \codeblock{bash}{{
  $ fly delete-target -a
  }}

  Note: These two variations are mutually exclusive. If the target parameter
  \code{-t} and all parameter \code{-a} are both specified, an error will
  occur.
}

\section{
  \title{\code{fly sync}}{fly-sync}

  Occasionally we add additional features to \code{fly} or make changes to the
  communication between it and Concourse's API server. To make sure you're
  running the latest and greatest version that works with the Concourse you
  are targeting we provide a command called \code{sync} that will update your
  local \code{fly}. It can be used like so:

  \codeblock{bash}{{
  $ fly -t example sync
  }}

  The \code{fly} command will also warn you if it notices that your CLI version
  is out of sync with the server.
}

\section{
  \title{\code{fly completion}}{fly-completion}

  Fly can output autocomplete configuration for some shells. For
  example, you can add an entry to your \code{.bashrc} like this:

  \codeblock{bash}{{
  source <(fly completion --shell bash)
  }}

  or, using the \code{/etc/bash_completion.d} directory:

  \codeblock{bash}{{
  $ fly completion --shell bash > /etc/bash_completion.d/fly
  }}

  Note that, unlike other fly commands, this command does not interact with a
  remote server so you do not need to provide the \code{-t} or \code{--target}
  flag.
}
