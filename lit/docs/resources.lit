\title{Resources}{resources}

\use-plugin{concourse-docs}
\split-sections

Resources are the heart and soul of Concourse. They represent all external
inputs to and outputs of \reference{jobs}{jobs} in the pipeline.

Each resource represents a versioned artifact with an external source of truth.
Configuring the same resource in any pipeline on any Concourse cluster will
behave the exact same way. Concourse will continuously \code{check} each
configured resource to discover new versions. These versions then flow through
the pipeline via \reference{get-step}s configured on \reference{jobs}.

More concretely, resources are containers that run on your workers. See
\reference{implementing-resource-types} for more details.

A pipeline's resources are listed under \reference{schema.pipeline.resources}
with the following schema.

\schema{resource}{
  \required-attribute{name}{identifier}{
    The name of the resource. This should be short and simple. This name will
    be referenced by \reference{build-plans}{build plans} of jobs in the
    pipeline.
  }

  \required-attribute{type}{resource_type.name}{
    The \reference{resource-types}{resource type} implementing the resource.
  }

  \required-attribute{source}{config}{
    The configuration for the resource. This varies by resource type, and is a black
    box to Concourse; it is blindly passed to the resource at runtime.

    To use \code{git} as an example, the source may contain the repo URI, the
    branch of the repo to track, and a private key to use when pushing/pulling.

    By convention, documentation for each resource type's configuration is
    in each implementation's \code{README}.

    You can find the source for the resource types provided with Concourse at the
    \link{Concourse GitHub
    organization}{https://github.com/concourse?q=-resource}.
  }

  \optional-attribute{old_name}{identifier}{
    The old name of the resource. If configured, the history of the old resource will be
    inherited to the new one. Once the pipeline is set, this field can be
    removed as the history has been transferred.

    \example-toggle{Renaming a resource}{
      This can be used to rename a resource without losing its history, like so:

      \codeblock{yaml}{{
      resources:
      - name: new-name
        old_name: current-name
        type: git
        source: {uri: "https://github.com/vito/booklit"}
      }}

      After the pipeline is set, the resource was successfully renamed, so the `old_name` field can
      be removed from the resource:

      \codeblock{yaml}{{
      resources:
      - name: new-name
        type: git
        source: {uri: "https://github.com/vito/booklit"}
      }}
    }
  }

  \optional-attribute{icon}{string}{
    The name of a \link{Material Design icon}{https://materialdesignicons.com/}
    to show next to the resource name in the web UI. For example,
    \code{github}.
  }

  \optional-attribute{version}{version}{
    A version to pin the resource to across the pipeline. This has the same
    effect as setting \reference{schema.get.version} on every
    \reference{get-step} referencing the resource.

    Resources can also be temporarily pinned to a version via the API and web UI.
    However this functionality is disabled if the resource is pinned via
    configuration, and if a pipeline is configured to have a version pinned while
    also pinned in the web UI, the configuration takes precedence and will clear
    out the temporary pin.
  }

  \optional-attribute{check_every}{duration | `never`}{
    \italic{Default \code{1m}.} The interval on which to check for new versions
    of the resource. Acceptable interval options are defined by the
    \link{time.ParseDuration
    function}{https://golang.org/pkg/time/#ParseDuration}.

    If set to \code{never} the resource will not be automatically checked. The
    resource can still be checked manually via the web UI, fly, or webhooks.
  }

  \optional-attribute{check_timeout}{duration}{
    \italic{Default \code{1h}.} The time limit on checking new versions of
    resources. Acceptable interval options are defined by the
    \link{time.ParseDuration
    function}{https://golang.org/pkg/time/#ParseDuration}.
  }

  \optional-attribute{expose_build_created_by}{boolean}{
    \italic{Default \code{false}.} If set to \code{true}, environment variable
    \reference{resource-metadata}{\code{BUILD_CREATED_BY}} will be available in
    the metadata of a \reference{put-step}{put step}. This field is not made
    available to the \reference{get-step}.
  }

  \optional-attribute{tags}{[string]}{
    \italic{Default \code{[]}.} A list of tags to determine which workers the
    checks will be performed on. You'll want to specify this if the source is
    internal to a worker's network, for example.

    \warn{
      This does not apply tags to all \reference{get-step}{get steps} or
      \reference{put-step}{put steps} that use the resource. If you want these steps
      to use tags, you must set \reference{schema.tags} for each step.
    }
  }

  \optional-attribute{public}{boolean}{
    \italic{Default \code{false}.} If set to \code{true}, the metadata for each
    version of the resource will be viewable by unauthenticated users (assuming
    the pipeline has been \reference{exposing}{exposed}).

    Resource metadata should never contain credentials or secret information, but
    this is off by default just to be safe in case users don't want to show
    things like commit messages and authors to the public.

    Note: even when set to \code{false}, the versions identifiers will be
    visible. In addition, if a resource is fetched in a build whose job is marked
    \reference{schema.job.public}, metadata will be visible in the build output.
  }

  \optional-attribute{webhook_token}{string}{
    If specified, web hooks can be sent to trigger an immediate \italic{check}
    of the resource, specifying this value as a primitive form of
    authentication via query params.

    After configuring this value, you would then configure your hook sender with
    the following painfully long path appended to your external URL:

    \code{{
      /api/v1/teams/TEAM_NAME/pipelines/PIPELINE_NAME/resources/RESOURCE_NAME/check/webhook?webhook_token=WEBHOOK_TOKEN
    }}

    For \reference{managing-instanced-pipelines}{instance pipelines} you will
    need to include the pipeline vars for a single pipeline instance. Currently
    you can not have webhooks for all instances of a pipeline.

    The pipeline vars should be added to the webhook URL as \link{URL
    parameters}{https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#parameters}
    with the format \code{vars.MY-VAR="SOME-VALUE"}. A webhook URL for a
    pipeline instance may look like this:

    \code{{
      /api/v1/teams/TEAM_NAME/pipelines/PIPELINE_NAME/resources/RESOURCE_NAME/check/webhook?webhook_token=WEBHOOK_TOKEN&vars.my-var="some-value"&vars.second-var="two"
    }}

    Note that the request payload sent to this API endpoint is entirely
    ignored.  You should configure the resource as if you're not using web
    hooks, as the resource \reference{schema.resource.source}{config} is still
    the "source of truth."
  }
}

\table-of-contents
\include-section{resources/versions.lit}
\include-section{resources/managing.lit}

\right-side{Examples}{
  \example{\code{git} resource}{
    The following resource definition is an example of the \resource{git}:

    \codeblock{yaml}{{{
    name: booklit
    type: git
    source: {uri: "https://github.com/concourse/booklit"}
    }}}

    This could be passed to a job via a \reference{get-step} with
    \reference{schema.get.trigger}{\code{trigger: true}} to run the tests
    whenever there's new code:

    \codeblock{yaml}{{{
    resources:
    - name: booklit
      type: git
      source: {uri: "https://github.com/concourse/booklit"}

    jobs:
    - name: unit
      plan:
      - get: booklit
        trigger: true
      - task: test
        file: booklit/ci/test.yml
    }}}
  }

  \example{\code{time} resource}{
    The following resource emits a new version every hour:

    \codeblock{yaml}{{{
    name: 1h
    type: time
    source: {interval: 1h}
    }}}

    This could be passed to a job via a \reference{get-step} with
    \reference{schema.get.trigger}{\code{trigger: true}} to run the job
    periodically:

    \codeblock{yaml}{{{
    resources:
    - name: 1h
      type: time
      source: {interval: 1h}

    jobs:
    - name: nag
      plan:
      - get: 1h
        trigger: true
      - task: nag
        config: # ...
    }}}
  }
}
