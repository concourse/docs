\title{Managing Pipelines}{managing-pipelines}

\use-plugin{concourse-docs}

\section{
  \title{\code{fly pipelines}}{fly-pipelines}

  To list the currently-configured pipelines and their paused state, run:

  \codeblock{bash}{{
  $ fly -t example pipelines
  }}

  By default, archived pipelines are not included in the output of this command.
  To view archived pipelines, provide \code{--include-archived} flag.
}

\section{
  \title{\code{fly rename-pipeline}}{fly-rename-pipeline}

  To rename a pipeline, run:

  \codeblock{bash}{{
  $ fly -t example rename-pipeline \\
      --old-name my-pipeline \\
      --new-name my-cool-pipeline
  }}

  All job history is retained when renaming a pipeline.
}

\section{
  \title{\code{fly pause-pipeline}}{fly-pause-pipeline}

  To pause a pipeline, run:

  \codeblock{bash}{{
  $ fly -t example pause-pipeline --pipeline my-pipeline
  }}

  This will prevent jobs from being scheduled and stop the periodic checking
  for new versions of resources. Builds that are in-flight will still finish.
}

\section{
  \title{\code{fly unpause-pipeline}}{fly-unpause-pipeline}

  To unpause a pipeline, run:

  \codeblock{bash}{{
  $ fly -t example unpause-pipeline --pipeline my-pipeline
  }}

  This will resume job scheduling and resource checking.
}

\section{
  \title{\code{fly expose-pipeline}}{fly-expose-pipeline}

  By default, newly configured pipelines are only visible to the pipeline's
  team. To make a pipeline viewable by other teams and unauthenticated users,
  run:

  \codeblock{bash}{{
  $ fly -t example expose-pipeline --pipeline my-pipeline
  }}

  This feature is useful if you're using Concourse for an open source project
  and you'd like your community to be able to see into your build pipeline.

  To undo this change, see \reference{fly-hide-pipeline}.

  Exposing a pipeline reveals basically everything except for build output and
  resource metadata.

  To expose a resource's metadata, \reference{schema.resource.public} must be set to
  \code{true}.

  To expose a job's build output, \reference{schema.job.public} must be set to
  \code{true}. This will also reveal resource metadata for any
  \reference{get-step} or \reference{put-step}s in the build output.
}

\section{
  \title{\code{fly hide-pipeline}}{fly-hide-pipeline}

  If you realize that you've made a terrible mistake in
  \reference{fly-expose-pipeline}{exposing your pipeline}, you can run:

  \codeblock{bash}{{
  $ fly -t example hide-pipeline --pipeline my-pipeline
  }}

  If you're panicking you can run the command's short form, \code{hp}, instead.
}

\section{
  \title{\code{fly get-pipeline}}{fly-get-pipeline}

  Fly can be used to fetch and update the configuration for your pipelines. This
  is achieved by using the \reference{fly-get-pipeline} and
  \reference{fly-set-pipeline} commands. For example, to fetch the current
  configuration of your \code{my-pipeline} Concourse pipeline and print it on
  \code{STDOUT} run the following:

  \codeblock{bash}{{
  $ fly -t example get-pipeline --pipeline my-pipeline
  }}

  To get JSON instead of YAML you can use the \code{-j} or \code{--json}
  argument. This can be useful when inspecting your config with
  \link{jq}{http://stedolan.github.io/jq/}.
}

\section{
  \title{\code{fly destroy-pipeline}}{fly-destroy-pipeline}

  Every now and then you just don't want a pipeline to be around anymore.
  Running \code{fly destroy-pipeline} will stop the pipeline activity and remove
  all data collected by the pipeline, including build history and collected
  versions.

  For example, to destroy the \code{my-pipeline} pipeline, you would run:

  \codeblock{bash}{{
  $ fly -t example destroy-pipeline --pipeline my-pipeline
  }}
}

\section{
  \title{\code{fly order-pipelines}}{fly-order-pipelines}

  To configure the ordering of pipelines, run:

  \codeblock{bash}{{
  $ fly -t example order-pipelines \\
      --pipeline pipeline-1 \\
      --pipeline pipeline-2 \\
      --pipeline pipeline-3
  }}

  Note that this command only ensures that the given pipelines are in the given
  order. If there are other pipelines that you haven't included in the command,
  they may appear in-between, before, or after the given set.

  \warn{
    If you want to reorder instanced pipelines within an individual instance
    group, you should use the \reference{fly-order-instanced-pipelines} command.
  }
}

\section{
    \title{\code{fly archive-pipeline}}{fly-archive-pipeline}

    A pipeline can be archived via fly. This means that the pipeline will be paused
    and hidden from the web UI. The pipeline config will be deleted (so any secrets or
    interpolated \reference{vars} will be removed) while the build logs will be retained.

    \codeblock{bash}{{
    $ fly -t example archive-pipeline -p pipeline-1
    }}

    To unarchive a pipeline, simply set the pipeline again with the same name
    using \reference{fly-set-pipeline}. If a job in the new pipeline has the same name
    as a job in the archived pipeline, the old build logs for that job will be restored.

    Note that because the config is deleted, \reference{fly-get-pipeline} will no
    longer work for archived pipelines.
}
