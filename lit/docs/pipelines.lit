\title{Pipelines}{pipelines}

\use-plugin{concourse-docs}
\split-sections

A pipeline is the result of configuring \reference{jobs} and
\reference{resources} together. When you configure a pipeline, it takes on a
life of its own, to continuously detect resource versions and automatically
queue new builds for jobs as they have new available inputs.

The name of a pipeline has a few restrictions that are outlined here:
\reference{schema.identifier}.

Pipelines are configured via \reference{fly-set-pipeline} or the
\reference{set-pipeline} as declarative \reference{intro-to-yaml}{YAML
files} which conform to the following schema:

\schema{pipeline}{
  \required-attribute{jobs}{[job]}{
    A set of \reference{jobs}{jobs} for the pipeline to continuously schedule. At least one job is required for a pipeline to be valid.
  }

  \optional-attribute{resources}{[resource]}{
    A set of \reference{resources}{resources} for the pipeline to continuously
    check.
  }

  \optional-attribute{resource_types}{[resource_type]}{
    A set of \reference{resource-types}{resource types} for resources within the
    pipeline to use.
  }

  \optional-attribute{var_sources}{[var_source]}{
    A set of \reference{var-sources} for the pipeline to use.
  }

  \optional-attribute{groups}{[group_config]}{
    A list of job groups to use for organizing jobs in the web UI.

    Groups have no functional effect on your pipeline. They are purely for
    making it easier to grok large pipelines in the web UI.

    Note: once you have added groups to your pipeline, all jobs must be in a
    group.

    \example-toggle{Grouping jobs}{
      The following example will make the "tests" group the default view (since
      it's listed first), separating the later jobs into a "publish" group:

      \codeblock{yaml}{{
      groups:
      - name: test
        jobs:
        - unit
        - integration
      - name: publish
        jobs:
        - deploy
        - shipit
      }}

      This would display two tabs at the top of the home page: "test" and
      "publish".

      For a real world example of how groups can be used to simplify navigation
      and provide logical grouping, see the groups used at the top of the page
      in the \link{Concourse pipeline}{https://ci.concourse-ci.org}.
    }

    \schema{group_config}{
      \required-attribute{name}{identifier}{
        A unique name for the group. This should be short and simple as it will
        be used as the tab name for navigation.
      }

      \optional-attribute{jobs}{[job.name]}{
        A list of jobs that should appear in this group. A job may
        appear in multiple groups. Neighbours of jobs in the current group will also
        appear on the same page in order to give context of the location of the
        group in the pipeline.

        You may also use any valid \link{glob}{https://www.man7.org/linux/man-pages/man7/glob.7.html}
        to represent several jobs, e.g.:

        \codeblock{yaml}{{{
        groups:
        - name: develop
          jobs:
          - terraform-*
          - test
          - deploy-{dev,staging}
        - name: ship
          jobs:
          - deploy-prod
        - name: all
          jobs:
          - "*"
        }}}

        In this example, the \code{develop} group will match
        \code{terraform-apply}, \code{terraform-destroy}, \code{test},
        \code{deploy-dev}, \code{deploy-staging}. The \code{ship} group will only match
        \code{deploy-prod}. The \code{all} group will match all jobs in the pipeline.

        \warn{Note that depending on how it's used, \code{*}, \code{\{}, and
        \code{\}} have special meaning in YAML, and may need to be quoted (as
        was done in the \code{all} job above)}
      }
    }
  }

  \optional-attribute{display}{display_config}{
    \warn{
      \code{display} was introduced in Concourse v6.6.0. It is considered an
      \bold{experimental} feature.
    }

    Visual configurations for personalizing your pipeline.

    \example-toggle{Background image}{
      The following example will display an image in the background of the pipeline
      it is configured on.

      \codeblock{yaml}{{
      display:
        background_image: https://avatars1.githubusercontent.com/u/7809479?s=400&v=4
      }}
    }

    \schema{display_config}{
      \optional-attribute{background_image}{string}{
        Allows users to specify a custom background image for the pipeline.
        Must be an http, https, or relative URL.
      }
      \optional-attribute{background_filter}{string}{
        \italic{Default \code{opacity(30%) grayscale(100%)}.} Allows users to
        specify custom \link{CSS
        filters}{https://developer.mozilla.org/en-US/docs/Web/CSS/filter} that
        are applied to the \code{background_image}.
      }
    }
  }
}

\table-of-contents

\include-section{pipelines/configuring.lit}
\include-section{pipelines/managing.lit}
\include-section{pipelines/instance-groups.lit}

\right-side{Examples}{
  \example{Hello, world!}{
    The following example makes use of an embedded \reference{tasks}{task
    config} to define the smallest possible pipeline.

    \codeblock{yaml}{{{
      jobs:
      - name: hello-world
        plan:
        - task: say-hello
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: {repository: alpine}
            run:
              path: echo
              args: ["Hello, world!"]
    }}}
  }

  \example{Small Go Project}{
    When it comes to real-world projects, task configs are usually stored
    alongside the code that it's testing. This makes the pipeline a bit
    smaller and makes the config able to change without needing to
    reconfigure the pipeline.

    \codeblock{yaml}{{
      ---
      resources:
      - name: booklit
        type: git
        source:
          uri: https://github.com/concourse/booklit
          branch: master

      jobs:
      - name: unit
        plan:
        - get: booklit
          trigger: true
        - task: unit
          file: booklit/ci/test.yml
    }}
  }

  \example{Chaining Jobs}{
    Promoting resources to downstream jobs is done by setting
    \reference{schema.get.passed} on a \reference{get-step}{\code{get} step}.

    Note that nothing in \code{unit} says anything about triggering
    \code{build}. Job definitions are self-contained; they describe their
    dependencies and where they come from, which results in a dependency flow
    that Concourse pushes forward.

    \codeblock{yaml}{{{
      ---
      resources:
      - name: booklit
        type: git
        source:
          uri: https://github.com/concourse/booklit
          branch: master

      jobs:
      - name: unit
        plan:
        - get: booklit
          trigger: true
        - task: run-unit
          file: booklit/ci/test.yml

      - name: build
        plan:
        - get: booklit
          passed: [unit]
          trigger: true
        - task: run-build
          file: booklit/ci/build.yml
    }}}
  }

  \example{Using Resource Types}{
    \reference{resource-types}{Resource Types} can be used to extend the
    functionality of your pipeline and provide deeper integrations. This
    example uses one to trigger a job whenever a new \link{Dinosaur
    Comic}{http://www.qwantz.com} is out.

    \codeblock{yaml}{{{
      ---
      resource_types:
      - name: rss
        type: registry-image
        source:
          repository: suhlig/concourse-rss-resource
          tag: latest

      resources:
      - name: dinosaur-comics
        type: rss
        source:
          url: http://www.qwantz.com/rssfeed.php

      jobs:
      - name: announce
        plan:
        - get: dinosaur-comics
          trigger: true
    }}}
  }
}
