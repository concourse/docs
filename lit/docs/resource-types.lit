\title{Resource Types}{resource-types}

\use-plugin{concourse-docs}

Each resource in a pipeline has a \code{type}. The resource's type determines
what versions are detected, the bits that are fetched when the resource's
\reference{get-step} runs, and the side effect that occurs when the resource's
\reference{put-step} runs.

Concourse comes with a few "core" resource types to cover common use cases like
\code{git} and \code{s3} - the rest are developed and supported by the
Concourse community. An exhaustive list of all resource types is available in
the \link{Resource Types catalog}{https://resource-types.concourse-ci.org}.

A pipeline's resource types are listed under
\reference{schema.pipeline.resource_types} with the following schema:

\schema{resource_type}{
  \required-attribute{name}{identifier}{
    The name of the resource type. This should be short and simple. This name
    will be referenced by \reference{schema.pipeline.resources} defined within
    the same pipeline, and \reference{schema.task-config.image_resource}s used
    by tasks running in the pipeline.

    Pipeline-provided resource types can override the core resource types by
    specifying the same name.
  }

  \required-attribute{type}{resource_type.name | identifier}{
    The type of the resource used to provide the resource type's container
    image.

    This is a bit meta. Usually this value will be \code{registry-image} as the
    resource type must result in a container image.

    A resource type's type can refer to other resource types, and can also use the
    core type that it's overriding. This is useful for bringing in a newer or
    forked \code{registry-image} resource.
  }

  \required-attribute{source}{config}{
    The configuration for the resource type's resource. This varies
    by resource type, and is a black box to Concourse; it is blindly passed to
    the resource at runtime.

    To use \code{registry-image} as an example, the source would contain something
    like \code{repository: username/reponame}. See the \link{Registry Image
    resource}{https://github.com/concourse/registry-image-resource} (or whatever
    resource type your resource type uses) for more information.
  }

  \optional-attribute{privileged}{boolean}{
    \italic{Default \code{false}.} If set to \code{true}, the resource's
    containers will be run with full capabilities, as determined by the worker
    backend the task runs on.

    For Linux-based backends it typically determines whether or not the
    container will run in a separate user namespace, and whether the
    \code{root} user is "actual" \code{root} (if set to \code{true}) or a user
    namespaced \code{root} (if set to \code{false}, the default).

    This is a gaping security hole; only configure it if the resource type needs
    it (which should be called out in its documentation). This is not up to the
    resource type to decide dynamically, so as to prevent privilege escalation
    via third-party resource type exploits.
  }

  \optional-attribute{params}{config}{
    Arbitrary config to pass when running the \reference{get} to fetch the resource
    type's image. This is equivalent to \reference{schema.get.params}.
  }

  \optional-attribute{check_every}{duration}{
    \italic{Default \code{1m}.} The interval on which to check for new versions
    of the resource type. Acceptable interval options are defined by the
    \link{time.ParseDuration
    function}{https://golang.org/pkg/time/#ParseDuration}.
  }

  \optional-attribute{tags}{[string]}{
    \italic{Default \code{[]}.} A list of tags to determine which workers the
    checks will be performed on. You'll want to specify this if the source is
    internal to a worker's network, for example. See also
    \reference{schema.tags}.
  }

  \optional-attribute{defaults}{config}{
    The default configuration for the resource type. This varies
    by resource type, and is a black box to Concourse; it is merged with
    (duplicate fields are overwritten by) \reference{schema.resource.source}
    and passed to the resource at runtime.

    \example-toggle{Setting default configuration for resources}{
      \codeblock{yaml}{{{
        resource_types:
        - name: gcs
          type: registry-image
          source:
            repository: frodenas/gcs-resource
          defaults:
            json_key: ((default_key))

        resources:
        - name: bucket-a
          type: gcs
          source:
            bucket: a

        - name: bucket-b
          type: gcs
          source:
            bucket: b

        - name: bucket-c
          type: gcs
          source:
            bucket: c
            json_key: ((different_key))
      }}}
    }

    \example-toggle{Overriding default resource types}{
      Since it's possible to overwrite the base resource types, it can be
      used to give defaults to resources at the pipeline level.

      \codeblock{yaml}{{{
      resource_types:
      - name: registry-image
        type: registry-image
        source:
          repository: concourse/registry-image-resource
        defaults:
          registry_mirror:
            host: https://registry.mirror.example.com

      resources:
      - name: mirrored-image
        type: registry-image
        source:
          repository: busybox
      }}}

      Alternatively, the web node can be configured to use
      \reference{resource-defaults}{defaults for base resource types}
    }
  }
}

\example-toggle{Using a \code{rss} resource type to subscribe to RSS feeds}{
  \reference{resource-types}{Resource Types} can be used to extend the
  functionality of your pipeline and provide deeper integrations. This
  example uses one to trigger a job whenever a new \link{Dinosaur
  Comic}{http://www.qwantz.com} is out.

  \codeblock{yaml}{{{
    ---
    resource_types:
    - name: rss
      type: registry-image
      source:
        repository: suhlig/concourse-rss-resource
        tag: latest

    resources:
    - name: booklit-releases
      type: rss
      source:
        url: http://www.qwantz.com/rssfeed.php

    jobs:
    - name: announce
      plan:
      - get: booklit-releases
        trigger: true
  }}}
}

\split-sections
\table-of-contents

\include-section{./resource-types/implementing.lit}
\include-section{./resource-types/managing.lit}
