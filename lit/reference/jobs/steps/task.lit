\use-plugin{concourse-docs}

\title{\code{task} step}{task-step}

Executes a \reference{tasks}{Task}, either from a file fetched via the
preceding steps, or with inlined configuration.

If any task in the build plan fails, the build will complete with failure. By
default, any subsequent steps will not be performed. You can perform additional
steps after failure by adding a \reference{on-failure-step-hook}{\code{on_failure}}
or \reference{ensure-step-hook}{\code{ensure}} step hook.

When a task completes, the files in its declared outputs will be made avaliable
to subsequent steps. This allows those subsequent steps to process the result
of a task.

\examples{
  \example{Inputs & Outputs}{
    The following plan pulls down a repo, makes a commit to it, and pushes the
    commit to another repo (the task must have an output called
    \code{repo-with-commit}):

    \codeblock{yaml}{{
    plan:
    - get: my-repo
    - task: commit
      file: my-repo/commit.yml
    - put: other-repo
      params:
        repository: repo-with-commit
    }}
  }

  \example{Build Matrix with \code{aggregate}}{
    The following plan fetches a single repository and executes multiple tasks,
    using the \reference{aggregate-step}{\code{aggregate}} step, in a build matrix
    style configuration:

    \codeblock{yaml}{{
    plan:
    - get: my-repo
    - aggregate:
      - task: go-1.3
        file: my-repo/go-1.3.yml
      - task: go-1.4
        file: my-repo/ci/go-1.4.yml
    }}

    Only if both tasks succeed will the build go green. See also
    \reference{aggregate-step}.
  }
}

\define-attribute{task: string}{
  \italic{Required.} A freeform name for the task that's being executed. Common
  examples would be \code{unit} or \code{integration}.
}

\define-attribute{config: object}{
  \italic{Required.} The \reference{tasks}{task config} to execute. An
  alternative to \reference{file}.
}

\define-attribute{file: string}{
  \italic{Required.} A dynamic alternative to \reference{config}.

  \code{file} points at a \code{.yml} file containing the
  \reference{tasks}{task config}, which allows this to be tracked with your
  resources.

  The first segment in the path should refer to another source from the plan,
  and the rest of the path is relative to that source.

  For example, if in your plan you have the following
  \reference{get-step}{\code{get}} step:

  \codeblock{yaml}{{
    - get: something
  }}

  And the \code{something} resource provided a \code{unit.yml} file, you
  would set \code{file: something/unit.yml}.
}

\define-attribute{privileged: boolean}{
  \italic{Optional. Default \code{false}.} If set to \code{true}, the task will
  run with full capabilities, as determined by the Garden backend the task runs
  on. For Linux-based backends it typically determines whether or not the
  container will run in a separate user namespace, and whether the \code{root}
  user is "actual" \code{root} (if set to \code{true}) or a user namespaced
  \code{root} (if set to \code{false}, the default).

  This is a gaping security hole; use wisely and only if necessary. This is not
  part of the task configuration to prevent privilege escalation via pull
  requests.
}{task-step-privileged}

\define-attribute{vars: object}{
  \italic{Optional.} A map of template variables to pass to an external task.
  Only works with external tasks defined in \code{file}.

  For example:

  \codeblock{yaml}{{
  plan:
  - get: my-repo
  - task: integration
    file: my-repo/ci/task.yml
    vars:
      text: "Hello World!"
  }}

  This is often used in combination with
  \reference{pipeline-params}{\code{((parameters))}} in the pipeline.

  \codeblock{yaml}{{
  plan:
  - get: my-repo
  - task: integration
    file: my-repo/ci/task.yml
    vars:
      text: ((text))
  }}

  And \code{task.yml}:

  \codeblock{yaml}{{{
    ---
    platform: linux

    image_resource:
      type: docker-image
      source:
        repository: my.local.registry:8080/my/image
        username: ((myuser))
        password: ((mypass))

    run:
      path: echo
      args: ["((text))"]
  }}}

  This will resolve \code{((text))} to \code{{"Hello World!"}}, while \code{((myuser))} and \code{((mypass))}  will
  be resolved in runtime via a \reference{creds}{credential manager}, if it has been configured.
}{task-step-vars}

\define-attribute{params: object}{
  \italic{Optional.} A map of task parameters to set, overriding those
  configured in \code{config} or \code{file}.

  The difference between \reference{task-step-params} and \reference{task-step-vars} is that \reference{task-step-vars}
  allows you to interpolate any template variable in an external task, while \reference{task-step-params} can be
  used to overwrite task parameters (i.e. env variables) specifically. Also, \reference{task-step-params} can have
  default values declared in the task.

  For example:

  \codeblock{yaml}{{
  plan:
  - get: my-repo
  - task: integration
    file: my-repo/ci/integration.yml
    params:
      REMOTE_SERVER: 10.20.30.40:8080
      USERNAME: my-user
      PASSWORD: my-pass
  }}

  This is often used in combination with
  \reference{pipeline-params}{\code{((parameters))}} in the pipeline.

  For example:

  \codeblock{yaml}{{
  plan:
  - get: my-repo
  - task: integration
    file: my-repo/ci/integration.yml
    params:
      REMOTE_SERVER: 10.20.30.40:8080
      USERNAME: ((integration-username))
      PASSWORD: ((integration-password))
  }}

  Looking into the \code{task.yml}, a common pattern is to list the param in
  the task definition with no value. This indicates that you expect the
  pipeline to provide the value.

  For example, in the \code{task.yml}:

  \codeblock{yaml}{{
  params:
    FOO: fizzbuzz
    BAR:
  }}

  And in the \code{pipeline.yml}:

  \codeblock{yaml}{{
  params:
    BAR: qux
  }}

  If the pipeline used this \code{task.yml} but did not set \code{BAR}, the
  value of \code{$BAR} would be set to the empty string in the task container.
}{task-step-params}

\define-attribute{image: string}{
  \italic{Optional.} Names an artifact source within the plan containing an
  image to use for the task. This overrides any \reference{image_resource}
  configuration present in the task configuration.

  This is very useful when part of your pipeline involves building an image,
  possibly with dependencies pre-baked. You can then propagate that image
  through the rest of your pipeline, guaranteeing that the correct version (and
  thus a consistent set of dependencies) is used throughout your pipeline.

  For example, here's a pipeline building an image in one job and propagating
  it to the next:

  \codeblock{yaml}{{{
  resources:
  - name: my-project
    type: git
    source: {uri: https://github.com/my-user/my-project}

  - name: my-task-image
    type: docker-image
    source: {repository: my-user/my-repo}

  jobs:
  - name: build-task-image
    plan:
    - get: my-project
    - put: my-task-image
      params: {build: my-project/ci/images/my-task}

  - name: use-task-image
    plan:
    - get: my-task-image
      passed: [build-task-image]
    - get: my-project
      passed: [build-task-image]
    - task: use-task-image
      image: my-task-image
      file: my-project/ci/tasks/my-task.yml
  }}}

  This can also be used in the simpler case of explicitly keeping track of
  dependent images, in which case you just wouldn't have a job building it
  (\code{build-task-image} in the above example).
}{task-step-image}

\define-attribute{input_mapping: object}{
  \italic{Optional.} A map from task input names to concrete names in the build
  plan. This allows a task with generic input names to be used multiple times
  in the same plan, mapping its inputs to specific resources within the plan.

  For example:

  \codeblock{yaml}{{{
  plan:
  - get: diego-release
  - get: cf-release
  - get: ci-scripts
  - task: audit-diego-release
    file: ci-scripts/audit-release.yml
    input_mapping: {release-repo: diego-release}
  - task: audit-cf-release
    file: ci-scripts/audit-release.yml
    input_mapping: {release-repo: cf-release}
  }}}
}

\define-attribute{output_mapping: object}{
  \italic{Optional.} A map from task output names to concrete names to register
  in the build plan. This allows a task with generic output names to be used
  multiple times in the same plan.

  This is often used together with \reference{input_mapping}. For example:

  \codeblock{yaml}{{{
  plan:
  - get: diego-release
  - get: cf-release
  - get: ci-scripts
  - task: create-diego-release
    file: ci-scripts/create-release.yml
    input_mapping: {release-repo: diego-release}
    output_mapping: {release-tarball: diego-release-tarball}
  - task: create-cf-release
    file: ci-scripts/create-release.yml
    input_mapping: {release-repo: cf-release}
    output_mapping: {release-tarball: cf-release-tarball}
  }}}
}
