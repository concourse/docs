\title{Docs}{docs}

\use-plugin{concourse-docs}

Concourse is a pipeline-based continuous automation system.

The term "pipeline" has become widespread in CI discussions, so being precise
about what this means is important; Concourse's pipelines differ significantly
from others.

\reference{pipelines} are built around \reference{resources}, which represent
all external state, and \reference{jobs}, which interact with them. Concourse
pipelines function as dependency flows, similar to distributed
\code{Makefile}s. Pipelines are designed to be self-contained to minimize
server-wide configuration. Maximizing portability also reduces risk, making
it simpler for projects to recover from CI disruptions.

\reference{resources} like the \resource{git} and \resource{s3} are used to
express source code, dependencies, deployments, and other external states.
This interface also models more abstract concepts like scheduled or
interval triggers, via the \resource{time}.

\reference{resource-types} are defined within the pipeline itself, making
the pipelines more self-sufficient while keeping Concourse lean and
versatile without needing a complex plugin system.

\reference{jobs} are sequences of \reference{get-step}{\code{get}},
\reference{put-step}{\code{put}}, and \reference{task-step}{\code{task}} steps
to execute. These \reference{steps}{steps} determine the job's inputs and
outputs. Jobs are designed to be idempotent and loosely coupled, allowing the
pipeline to evolve with project needs without requiring engineers to maintain
too much context simultaneously.

Everything in Concourse runs in a container. Instead of modifying workers to
install build tools, \reference{tasks} define their own container image
(typically using Docker images via the \resource{registry-image}).

\inline-header{...What?}

Concourse admittedly has a steeper learning curve initially, and depending on
your background it might seem like a lot to grasp. A key goal of this project is
for that curve to flatten out shortly after and lead to greater productivity
and reduced stress over time.

If this all sounds confusing, that's OK - you may want to simply continue
onward, start experimenting a bit, and use the above as a quick reference of
the "big picture" as your understanding develops.

\include-section{./docs/getting-started.lit}
\include-section{./docs/install.lit}
\include-section{./docs/auth.lit}
\include-section{./docs/fly.lit}
\include-section{./docs/config.lit}
\include-section{./docs/pipelines.lit}
\include-section{./docs/vars.lit}
\include-section{./docs/resources.lit}
\include-section{./docs/resource-types.lit}
\include-section{./docs/jobs.lit}
\include-section{./docs/steps.lit}
\include-section{./docs/tasks.lit}
\include-section{./docs/builds.lit}
\include-section{./docs/how-to-guides.lit}
\include-section{./docs/operation.lit}
\include-section{./docs/observation.lit}
\include-section{./docs/internals.lit}

\split-sections
\table-of-contents