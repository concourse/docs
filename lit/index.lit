\title{Docs}{index}

\use-plugin{concourse-docs}

\wide

\splash-intro{
  Concourse is an open-source continuous thing-doer.
}{
  Built on the simple mechanics of \reference{resources}{resources},
  \reference{tasks}{tasks}, and \reference{jobs}{jobs}, Concourse presents a
  general approach to automation that makes it great for
  \link{CI}{https://en.wikipedia.org/wiki/Continuous_integration}/\link{CD}{https://en.wikipedia.org/wiki/Continuous_delivery}.
}

\quick-start{
  Concourse is distributed as a single \code{concourse} binary, making it easy
  to run just about anywhere, especially with Docker.

  \codeblock{bash}{{
  $ wget https://concourse-ci.org/docker-compose.yml
  $ docker-compose up
  Creating docs_concourse-db_1 ... done
  Creating docs_concourse_1    ... done
  }}

  Concourse will be running at \link{127.0.0.1:8080}{http://127.0.0.1:8080}.
  You can log in with the username/password as \code{test}/\code{test}.

  Next, install \reference{fly-cli} by downloading it from the web UI and
  target your local Concourse as the \code{test} user:

  \codeblock{bash}{{
  $ fly -t tutorial login -c http://127.0.0.1:8080 -u test -p test
  logging in to team 'main'

  target saved
  }}

  Then, head to \link{Hello
  World}{https://concoursetutorial.com/basics/task-hello-world/} to kick the
  tires!
}

\splash-example{Configuration As Code}{
  You can think of a \reference{pipelines}{pipeline} as a distributed,
  higher-level, continuously-running \code{Makefile}.

  Each entry under \code{resources} is a dependency, and each entry under
  \code{jobs} describes a \reference{build-plans}{\code{plan}} to run when the
  job is triggered (either manually or by a \reference{get-step}).

  Jobs can depend on resources that have \reference{get-step-passed} through prior jobs.
  The resulting sequence of jobs and resources is a dependency graph that
  continuously pushes your project forward, from source code to production.
}{
  \codeblock{yaml}{{{
  resources:
  - name: booklit
    type: git
    source: {uri: "https://github.com/vito/booklit"}

  jobs:
  - name: unit
    plan:
    - get: booklit
      trigger: true
    - task: test
      file: booklit/ci/test.yml
  }}}
}

\splash-example{Fancy Visualization}{
  Your pipeline configuration is then visualized in the web UI, taking only one
  click to get from a red (failed) box to seeing why it failed.

  The visualization also provides a "gut check" feedback loop - if it
  \italic{looks} wrong, it probably \italic{is} wrong.
}{
  \image{images/concourse-pipeline.png}
}

\splash-example{CI Under Source Control}{
  All administration is done using \reference{fly-cli}{the \code{fly} CLI}. The
  \reference{fly-set-pipeline} command pushes the config up to Concourse. Once it
  looks good, you can then check the file in to source control. This makes it
  easy to recover if your Concourse server burns down.
}{
  \codeblock{sh}{{{
  $ fly -t ci set-pipeline -p booklit -c pipeline.yml
  $ vim pipeline.yml
  $ fly -t ci set-pipeline -p booklit -c pipeline.yml
  $ git add pipeline.yml
  $ git commit -m "initial pipeline"
  }}}
}

\splash-example{Reproducible, Debuggable Builds}{
  Everything runs in containers, ensuring a clean environment on every run.
  Each \reference{task}{task} specifies its own image, giving it full control
  over its dependencies, rather than managing them on your workers.

  The \reference{fly-intercept} command will pop you right into one of your
  build's containers, which can be useful for debugging.
}{
  \codeblock{sh}{{{
  $ fly -t ci intercept -j booklit/unit -s unit
  root@2c15ff11:/tmp/build/0df9eea0# ps
      PID TTY          TIME CMD
      171 pts/1    00:00:00 bash
     1876 pts/1    00:00:00 ps
  root@2c15ff11:/tmp/build/0df9eea0# ls
  depspath  gopath
  root@2c15ff11:/tmp/build/0df9eea0# █
  }}}
}

\splash-example{Rapid Local Iteration}{
  The \reference{fly-execute} command executes a task as a one-off build, with
  your local changes. This will run your code in exactly the same way it would
  run in your pipeline, without you having to repeatedly push broken commits
  until it works. Achieve the fabled green build #1!

  When a job fails, you can also use \reference{fly-execute} with \code{-j}
  flag to run with the same inputs as the failed job. You can then replace an
  input with your local changes with \code{-i} to test if your fix is valid.
}{
  \codeblock{sh}{{{
  ~/booklit $ fly -t ci execute -c ci/test.yml
  executing build 1 at http://127.0.0.1:8080/builds/1
  initializing
  booklit: 4.74 MiB/s 0s
  running gopath/src/github.com/vito/booklit/ci/test
  fetching dependencies...
  installing ginkgo...
  running tests...
  █
  }}}
}

\splash-example{Bring Your Own Integrations}{
  Concourse does not have a complex plugin system. Instead, it has a single
  strong abstraction.

  The \code{resources} section of a pipeline lists \reference{resources}, which
  are abstract external locations where your pipeline will monitor for changes,
  fetch bits from, and push bits to.

  For example, a resource with type \code{git} refers to a git repository,
  which will be \code{cloned} in a \reference{get-step} and \code{pushed} to in
  a \reference{put-step}. Behind the scenes, Concourse will continuously run
  \code{git fetch} to look for new commits that jobs may want to trigger on.

  At its core, though, Concourse knows nothing about Git. It comes with a
  \code{git} resource type out of the box, but you could just as easily bring
  your own into your pipeline. Resource types are implemented as container
  images containing scripts - using the \code{docker-image} resource type, they
  can be fetched from a Docker registry.
}{
  \codeblock{yaml}{{{
  resource_types:
  - name: slack
    type: docker-image
    source:
      repository: quay.io/ahelal/bender
      tag: latest

  resources:
  - name: slack-deploy
    type: slack
    source:
      slack_token: ((slack_token))
      channel: "admin"
      grammar: "dang! deploy it now!"

  jobs:
  - name: prod-deploy
    plan:
    - get: slack-deploy
      trigger: true
    - # ...
  }}}
}

\split-sections

\include-section{./about.lit}
\include-section{./setup-and-operations.lit}
\include-section{./concepts/concepts.lit}
\include-section{./tutorials.lit}
\include-section{./reference.lit}
\include-section{./contribute.lit}
\include-section{./community.lit}
\include-section{./trademarks.lit}


